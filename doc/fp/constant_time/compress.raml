type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/constant_time/compress.raml
 *
 * Author:
 *   Van Chan Ngo (2016)
 *
 * Description:
 *
 *)

(**
 * [compress l] returns a compressed list by replacing multiple sequential
 * occurences of a values by single occurrence.
 *)
;;
let rec compress l =
	match l with
  	| Nil -> ( Nil)
  	| Cons(h,t) -> (
		match t with
		| Nil -> ( l)
		| Cons(x,xs) ->
			if ((x : int) = (h : int)) then
				( compress t)
			else
				( Cons(h,(compress t))))

(**
 * Transform to constant w.r.t l with the consume expressions
 *)
;;
let rec consume_compress l =
	match l with
	| Nil -> ( Nil)
	| Cons(h,t) -> (
		match t with
		| Nil -> ( Raml.consume(h,t); l)
		| Cons(x,xs) ->
			if ((x : int) = (h : int)) then
				( Raml.consume(x,xs); consume_compress t)
			else
				( Cons(h,(consume_compress t))))

;;
