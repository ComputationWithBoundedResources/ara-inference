(VAR
    acc l l1 l2 n x xs)

(DATATYPES
   a = µX. < tuple#2(X,X) >
   b = µX. < dd(a,X), nil >
 )

(SIGNATURES
   append :: b x b -> b
   append#1 :: b x b -> b
   append3 :: b x b -> b
   append3#1 :: b x b -> b
   append4 :: b x b -> b
   append4#1 :: b x b -> b
   attach :: a x b -> b
   attach#1 :: b x a -> b
   attach3 :: a x b -> b
   attach3#1 :: b x a -> b
   attach4 :: a x b -> b
   attach4#1 :: b x a -> b
   pairs :: b -> b
   pairs#1 :: b -> b
   pairs' :: b -> b
   pairs'#1 :: b -> b
   pairs'aux :: b x b -> b
   pairs'aux#1 :: b x b -> b
   quadruples :: b -> b
   quadruples#1 :: b -> b
   triples :: b -> b
   triples#1 :: b -> b
 )

(RULES
    append(l1,l2) -> append#1(l1,l2)
    append#1(dd(x,xs),l2) -> dd(x,append(xs,l2))
    append#1(nil,l2) -> l2
    append3(l1,l2) -> append3#1(l1,l2)
    append3#1(dd(x,xs),l2) -> dd(x,append3(xs,l2))
    append3#1(nil,l2) -> l2
    append4(l1,l2) -> append4#1(l1,l2)
    append4#1(dd(x,xs),l2) -> dd(x,append4(xs,l2))
    append4#1(nil,l2) -> l2
    attach(n,l) -> attach#1(l,n)
    attach#1(dd(x,xs),n) -> dd(tuple#2(n,x),attach(n,xs))
    attach#1(nil,n) -> nil
    attach3(n,l) -> attach3#1(l,n)
    attach3#1(dd(x,xs),n) -> dd(tuple#2(n,x),attach3(n,xs))
    attach3#1(nil,n) -> nil
    attach4(n,l) -> attach4#1(l,n)
    attach4#1(dd(x,xs),n) -> dd(tuple#2(n,x),attach4(n,xs))
    attach4#1(nil,n) -> nil
    pairs(l) -> pairs#1(l)
    pairs#1(dd(x,xs)) -> append(attach(x,xs),pairs(xs))
    pairs#1(nil) -> nil
    pairs'(l) -> pairs'#1(l)
    pairs'#1(dd(x,xs)) -> append(pairs'(xs),attach(x,xs))
    pairs'#1(nil) -> nil
    pairs'aux(l,acc) -> pairs'aux#1(l,acc)
    pairs'aux#1(dd(x,xs),acc) -> pairs'aux(xs,append(attach(x,xs),acc))
    pairs'aux#1(nil,acc) -> acc
    quadruples(l) -> quadruples#1(l)
    quadruples#1(dd(x,xs)) -> append4(attach4(x,triples(xs)),quadruples(xs))
    quadruples#1(nil) -> nil
    triples(l) -> triples#1(l)
    triples#1(dd(x,xs)) -> append3(attach3(x,pairs(xs)),triples(xs))
    triples#1(nil) -> nil)
