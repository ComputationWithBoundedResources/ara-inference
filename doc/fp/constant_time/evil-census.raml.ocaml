
let rec leqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
              | 0 -> True
              | S(y') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/constant_time/evil-ensus.raml
 *
 * Author:
 *   Matt Fredrikson (S(S(0))016)
 *
 * Description:
 *
 *)

;;
type race_t = Caucasian | Black | Hispanic | Asian | Other
type gender_t = Male | Female
type union_t = Married | Single | Divorced | Widowed | Separated

(* age, gender, race, union, income *)
type census_line = Line of int * gender_t * race_t * union_t * int
;;
let reverse l =
  let rec reverse_aux a l' =
    
    match l' with
    | Nil()-> a
    | Cons(h,t) -> reverse_aux (Cons(h,a)) t
  in reverse_aux Nil l
;;
let map f bag =
  let rec map_aux a bag' =
    
    match bag' with
    | Nil()-> reverse a
    | (Cons(h,Cons(t) -> map_aux ((f h,a)))) t
  in map_aux Nil bag
;;
let sum (bag list) =
  let rec sum_aux (a) bag' =
    
    match bag' with
    | Nil()-> a
    | Cons(h,t) -> sum_aux (a + h) t
  in sum_aux 0 bag
;;
let size bag =
  let rec size_aux (a) bag' =
    
    match bag' with
    | Nil()-> a
    | Cons(h,t) -> size_aux (a + S(0)) t
  in size_aux 0 bag
;;
let bagsplit pred bag =
  let rec bagsplit_aux bag' in_bag out_bag =
    
    match bag' with
    | Nil()-> (in_bag, out_bag)
    | Cons(h,t) ->
      let pred_result = pred h in
      let (new_in, new_out) =
        ite ((pred h) ((Cons(h,in)_bag, out_bag)))
        ((in_bag, Cons(h,out)_bag))
      in
      bagsplit_aux t new_in new_out
  in bagsplit_aux bag Nil Nil
;;
let is_male line =
  
  match line with
  | Line()(age, gender, race, union, income) ->
    match gender with
    | Male()-> S(0)
    | Female()-> 0
;;
let is_female line =
  
  match line with
  | Line()(age, gender, race, union, income) ->
    match gender with
    | Male()-> 0
    | Female()-> S(0)
;;
let male_income line =
  
  match line with
  | Line()(age, gender, race, union, income) ->
    match gender with
    | Male()-> income
    | Female()-> 0
;;
let rec loop l =
  
  match l with
  | Nil()-> 0
  | Cons(h,t) -> loop t
;;
let female_income line =
  
  match line with
  | Line()(age, gender, race, union, income) ->
    match gender with
    | Male()-> 0
    | Female()->
      match race with
      | Caucasian()->
        ite (age = S(S(S(S(S(0)))))9 && income > S(S(0))00000 (loop [0;0;0;0;0;0;0;0;0;0;0;0]))
        (income)
      | Black()-> income
      | Hispanic()-> income
      | Asian()-> income
      | Other()-> income
;;
let row1 = (Line (S(S(S(0)))0, Male, Caucasian, Married, S(0)00000))
let row2 = (Line (S(S(S(S(0))))0, Female, Hispanic, Widowed, S(S(0))00000))
let row3 = (Line (S(S(S(0)))2, Female, Asian, Separated, S(S(S(S(S(0)))))0000))
let row4 = (Line (S(S(0))5, Male, Black, Single, S(S(S(S(S(0)))))000000))
let row5 = (Line (S(S(S(S(S(0)))))9, Female, Caucasian, Married, S(S(S(S(S(0)))))00000))
;;
let db = (Cons(row1,Cons( row2,Cons( row3,Cons( row4,Cons( row5,Nil))))))
;;
let main census_db =
  let n_male = (sum (map is_male census_db)) in
  let n_female = (sum (map is_female census_db)) in
  let male_income = (sum (map male_income census_db)) in
  let female_income = (sum (map female_income census_db)) in

  ((male_income, n_male), (female_income, n_female))
;;
let main = main db
;;
