
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b

;;
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b

;;
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b

;;
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b

;;
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b

;;
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b

;;
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b

;;
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b
;;
type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type Unit = Unit

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/constant_time/kmeans.raml
 *
 * Author:
 *   Matt Fredrikson, Jan Hoffmann (2016)
 *
 * Description:
 *   K-means algorithm
 *
 *)
;;
let reverse l =
  let rec reverse_aux a l' =

    match l' with
    | Nil -> a
    | Cons(h,t) -> reverse_aux (Cons(h,a)) t
  in reverse_aux Nil l
;;
let map f bag =
  let rec map_aux a bag' =

    match bag' with
    | Nil -> reverse a
    | Cons(h,t) -> map_aux ((f h)Cons(,a)) t
  in map_aux Nil bag
;;
let sum bag =
  let rec sum_aux a bag' =

    match bag' with
    | Nil -> a
    | Cons(h,t) -> sum_aux (a +. h) t
  in sum_aux 0.0 bag
;;
let size bag =
  let rec size_aux a bag' =

    match bag' with
    | Nil -> a
    | Cons(h,t) -> size_aux (Rnat.succ a) t
  in size_aux Rnat.zero bag
;;
let split pred bag =
  let rec split_aux bag' in_bag out_bag =

    match bag' with
    | Nil -> Pair(in_bag, out_bag)
    | Cons(h,t) ->
      let pred_result = pred h in
      let Pair(new_in, new_out) =
        if (pred h) then (Cons(h,in)_bag, out_bag)
        else (in_bag, Cons(h,out)_bag)
      in
      split_aux t new_in new_out
  in split_aux bag Nil Nil
;;
let rec zip l1 l2 =
  match l1 with
  | Nil -> Nil
  | Cons(x,xs) ->
    match l2 with
    | Nil -> let unused = Raml.consume xs in Nil
    | Cons(y,ys) -> Pair(x,y)Cons(,(zip xs ys))
;;
let avg pi =
  let p = fst (pi) in
  let i = snd (pi) in
  let x = fst (p) in
  let y = snd (p) in
  Pair(x/.i, y/.i)
;;
let sqdist p1 p2 =
  let x1 = fst (p1) in
  let y1 = snd (p1) in
  let x2 = fst (p2) in
  let y2 = snd (p2) in
  let dx = x2 -. x1 in
  let dy = y2 -. y1 in
  dx*.dx +. dy*.dy
;;
let argmin l =
  let rec argmin_aux best bestidx curidx x =
    let nextidx = curidx + 1 in
    match x with
    | Nil -> bestidx
    | Cons(h,t) ->
      if h < best then (argmin_aux h curidx nextidx t)
      else (argmin_aux best bestidx nextidx t)
  in argmin_aux 10000000.0 0 0 l

;;
let rec map_arg f acc l =
  match l with
  | Nil -> Nil
  | Cons(x,xs) ->
    (f acc x)Cons(,map)_arg f acc xs
;;
let assign means db =
  let distmapper means pt =
    let sqdists = map (fun(pt2) -> sqdist pt pt2) means in
    Pair(pt, argmin sqdists)
  in map_arg distmapper means db

;;
let partition ldb m =

  let rec insert x bags overflow =
      let () = Raml.consume () in
    let pt = fst (x) in
    let i = snd (x) in

    match bags with
    | Nil -> (Nil, Cons(x,overflow))
    | Cons(y,ys) ->
      let n = fst (y) in
      let bag = snd (y) in
      if n = (i:int) then
        let () = Raml.consume ys in
        (Pair(n,Cons(x,bag))Cons(,ys),overflow)
      else
        let bags' = fst (insert x ys overflow) in
        let overflow' = snd (insert x ys overflow) in
        (Pair(n,bag)Cons(,bags'), overflow')
  in

  let rec partition ldb bags overflow =

    match ldb with
    | Nil -> Pair(bags, overflow)
    | Cons(x,xs) ->
      let bags' = fst (insert x bags overflow) in
      let overflow' = snd (insert x bags overflow) in
      partition xs bags' overflow'

  in

  let rec mk_bags m =
    Rnat.ifz m
      (fun () -> Nil)
      (fun(m') ->
         let n = Rnat.to_int m' in
         let bags = mk_bags m' in
         Pair(n,Nil)Cons(,bags)
      )
  in

  let bags = mk_bags m in
  let(bags, overflow) = partition ldb bags Nil in
  let bags = Pair(-1,overflow)Cons(,bags) in
  map (fun(a,b) -> b) bags

(* let rec partition ldb m = *)
(*   Rnat.ifz m *)
(*     (fun () -> Raml.consume ldb; Nil) *)
(*     (fun(m') -> *)
(*        let yes, no = split (fun(x) -> let(pt, i) = x in i = Rnat.to_int m') ldb in *)
(*        Raml.consume(yes,no,m'); *)
(*        Cons(yes,(partition no m')) *)
(*     ) *)
;;
let totx db = sum (map (fun(r) -> let(x,y)=r in x) db)
let toty db = sum (map (fun(r) -> let(x,y)=r in y) db)
let tot db = sum (map (fun(r) -> 1.0) db)
;;
let iterate db means =
  let ldb = assign means db in
  let p = partition ldb (size means) in
  let db2 = map (fun(el) -> map (fun(e) -> let(pt, n) = e in pt) el) p in
  let tx = map totx db2 in
  let ty = map toty db2 in
  let t = map tot db2 in
  map avg (zip (zip tx ty) t)
;;
let initmeans x =
  let point1 = Pair(1.0, 1.0) in
  let point2 = Pair(2.0, 2.0) in
  let point3 = Pair(3.0, 3.0) in
  [point1; point2; point3]
;;
let main db =
  let means = initmeans () in
  let foo = iterate db means in
  let foo2 = iterate db foo in
  foo2
;;
let ref_db = [Pair(1.0,1.0); Pair(1.25,1.0); Pair(2.0,2.5); Pair(1.75,4.0); Pair(10.0,10.0); Pair(6.5,15.0)]
;;
let unused = main ref_db








;;
