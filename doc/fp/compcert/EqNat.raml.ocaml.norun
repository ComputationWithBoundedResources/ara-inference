
let rec leqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
              | 0 -> True
              | S(y') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(*-- Datatypes.ml --*)
(** val implb : bool -> bool -> bool **)
;;
let implb b1 b2 =
  ite (b1 (b2 (true)))

(** val xorb : bool -> bool -> bool **)
;;
let xorb b1 b2 =
  ite (b1 (if b2 then false (true else b2)))

(** val negb : bool -> bool **)
;;
let negb xyz = match xyz with x ->
ite ((x = true) (false (true)))
;;
type nat = O
| S(of) nat
;;
type ('a, 'b) sum =
| Coq_inl(of) 'a
| Coq_inr(of) 'b

(** val fst : ('a1 * 'a2) -> 'a1 **)
;;
let fst xyz = match xyz with a ->
let (x, y) = a in x

(** val snd : ('a1 * 'a2) -> 'a2 **)
;;
let snd xyz = match xyz with a ->
let (x, y) = a in y

(** val length : 'a1 list -> nat **)
;;
let rec length xyz = match xyz with myvariable ->
match myvariable with
| Nil()-> O
| Cons(y,l') -> S (length l')

(** val app : 'a1 list -> 'a1 list -> 'a1 list **)
;;
let rec app l m =
  match l with
  | Nil()-> m
  | Cons(a,l1) -> Cons(a,(app l1 m))
;;
type comparison = Eq
| Lt
| Gt

(** val coq_CompOpp : comparison -> comparison **)
;;
let coq_CompOpp xyz = match xyz with myvariable ->
match myvariable with
| Eq()-> Eq
| Lt()-> Gt
| Gt()-> Lt
;;
type coq_CompareSpecT =
| CompEqT
| CompLtT
| CompGtT

(** val coq_CompareSpec2Type : comparison -> coq_CompareSpecT **)
;;
let coq_CompareSpec2Type xyz = match xyz with myvariable ->
match myvariable with
| Eq()-> CompEqT
| Lt()-> CompLtT
| Gt()-> CompGtT
;;
type 'a coq_CompSpecT = coq_CompareSpecT

(** val coq_CompSpec2Type : 'a1 -> 'a1 -> comparison -> 'a1 coq_CompSpecT **)
;;
let coq_CompSpec2Type x y c =
  coq_CompareSpec2Type c

(*$$ Datatypes.ml $$*)

(** val beq_nat : nat -> nat -> bool **)
;;
let rec beq_nat n m =
  match n with
  | O()->
    (match m with
     | O()-> true
     | S(n)0 -> false)
  | S(n)1 ->
    (match m with
     | O()-> false
     | S(m)1 -> beq_nat n1 m1)

 ()
;;
