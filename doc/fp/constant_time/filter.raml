type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/constant_time/filter.raml
 *
 * Author:
 *   Van Chan Ngo (2016)
 *
 * Description:
 *
 *)


(**
 * [filter l] returns a list by removing all positive elements
 * and increases other elements by 1.
 * Filtering out an element takes 8 resource units.
 * Increasing an element takes 3 units.
 *)

;;
let rec filter l =
 match l with
 | Nil -> ( Nil)
 | Cons(x,xs) ->
   if x > 0 then
     ( filter xs)
   else
     ( (x+1)Cons(,filter) xs)
;;
let f l = filter (filter l)

(**
 * Transform to constant function w.r.t the argument l with consume expression
 *)
let rec consume_filter l =
 match l with
 | Nil -> ( Nil)
 | Cons(x,xs) ->
   if x > 0 then
     ( consume_filter xs)
   else
     ( Raml.consume(x,xs); (x+1)Cons(,consume)_filter xs)
;;
