(STRATEGY
    INNERMOST)

(VAR
    IL L M N V V1 V2 X X1 X2 X3 X4)
(DATATYPES
    A = ÂµX.< cons(X, X), 0, zeros, tt, s(X), nil, take(X, X), length(X), isNatIListKind(X), and(X, X), isNat(X), isNatKind(X), U11(X, X), U12(X), isNatList(X), U21(X, X), U22(X), U31(X, X), U32(X), U41(X, X, X), U42(X, X), U43(X), isNatIList(X), U51(X, X, X), U52(X, X), U53(X), U61(X, X, X), U62(X, X), U63(X), U71(X, X), U81(X), U91(X, X, X, X) >)
(SIGNATURES
    a__zeros :: [] -> A
    a__U11 :: [A x A] -> A
    a__U12 :: [A] -> A
    a__U21 :: [A x A] -> A
    a__U22 :: [A] -> A
    a__U31 :: [A x A] -> A
    a__U32 :: [A] -> A
    a__U41 :: [A x A x A] -> A
    a__U42 :: [A x A] -> A
    a__U43 :: [A] -> A
    a__U51 :: [A x A x A] -> A
    a__U52 :: [A x A] -> A
    a__U53 :: [A] -> A
    a__U61 :: [A x A x A] -> A
    a__U62 :: [A x A] -> A
    a__U63 :: [A] -> A
    a__U71 :: [A x A] -> A
    a__U81 :: [A] -> A
    a__U91 :: [A x A x A x A] -> A
    a__and :: [A x A] -> A
    a__isNat :: [A] -> A
    a__isNatIList :: [A] -> A
    a__isNatIListKind :: [A] -> A
    a__isNatKind :: [A] -> A
    a__isNatList :: [A] -> A
    a__length :: [A] -> A
    a__take :: [A x A] -> A
    mark :: [A] -> A)
(RULES
    a__zeros() -> cons(0(),zeros())
    a__U11(tt(),V1) ->
      a__U12(a__isNatList(V1))
    a__U12(tt()) -> tt()
    a__U21(tt(),V1) ->
      a__U22(a__isNat(V1))
    a__U22(tt()) -> tt()
    a__U31(tt(),V) ->
      a__U32(a__isNatList(V))
    a__U32(tt()) -> tt()
    a__U41(tt(),V1,V2) ->
      a__U42(a__isNat(V1),V2)
    a__U42(tt(),V2) ->
      a__U43(a__isNatIList(V2))
    a__U43(tt()) -> tt()
    a__U51(tt(),V1,V2) ->
      a__U52(a__isNat(V1),V2)
    a__U52(tt(),V2) ->
      a__U53(a__isNatList(V2))
    a__U53(tt()) -> tt()
    a__U61(tt(),V1,V2) ->
      a__U62(a__isNat(V1),V2)
    a__U62(tt(),V2) ->
      a__U63(a__isNatIList(V2))
    a__U63(tt()) -> tt()
    a__U71(tt(),L) ->
      s(a__length(mark(L)))
    a__U81(tt()) -> nil()
    a__U91(tt(),IL,M,N) ->
      cons(mark(N),take(M,IL))
    a__and(tt(),X) -> mark(X)
    a__isNat(0()) -> tt()
    a__isNat(length(V1)) ->
      a__U11(a__isNatIListKind(V1),V1)
    a__isNat(s(V1)) ->
      a__U21(a__isNatKind(V1),V1)
    a__isNatIList(V) ->
      a__U31(a__isNatIListKind(V),V)
    a__isNatIList(zeros()) -> tt()
    a__isNatIList(cons(V1,V2)) ->
      a__U41(a__and(a__isNatKind(V1)
                   ,isNatIListKind(V2))
            ,V1
            ,V2)
    a__isNatIListKind(nil()) -> tt()
    a__isNatIListKind(zeros()) ->
      tt()
    a__isNatIListKind(cons(V1
                          ,V2)) -> a__and(a__isNatKind(V1)
                                         ,isNatIListKind(V2))
    a__isNatIListKind(take(V1
                          ,V2)) -> a__and(a__isNatKind(V1)
                                         ,isNatIListKind(V2))
    a__isNatKind(0()) -> tt()
    a__isNatKind(length(V1)) ->
      a__isNatIListKind(V1)
    a__isNatKind(s(V1)) ->
      a__isNatKind(V1)
    a__isNatList(nil()) -> tt()
    a__isNatList(cons(V1,V2)) ->
      a__U51(a__and(a__isNatKind(V1)
                   ,isNatIListKind(V2))
            ,V1
            ,V2)
    a__isNatList(take(V1,V2)) ->
      a__U61(a__and(a__isNatKind(V1)
                   ,isNatIListKind(V2))
            ,V1
            ,V2)
    a__length(nil()) -> 0()
    a__length(cons(N,L)) ->
      a__U71(a__and(a__and(a__isNatList(L)
                          ,isNatIListKind(L))
                   ,and(isNat(N),isNatKind(N)))
            ,L)
    a__take(0(),IL) ->
      a__U81(a__and(a__isNatIList(IL)
                   ,isNatIListKind(IL)))
    a__take(s(M),cons(N,IL)) ->
      a__U91(a__and(a__and(a__isNatIList(IL)
                          ,isNatIListKind(IL))
                   ,and(and(isNat(M),isNatKind(M))
                       ,and(isNat(N),isNatKind(N))))
            ,IL
            ,M
            ,N)
    mark(zeros()) -> a__zeros()
    mark(U11(X1,X2)) ->
      a__U11(mark(X1),X2)
    mark(U12(X)) -> a__U12(mark(X))
    mark(isNatList(X)) ->
      a__isNatList(X)
    mark(U21(X1,X2)) ->
      a__U21(mark(X1),X2)
    mark(U22(X)) -> a__U22(mark(X))
    mark(isNat(X)) -> a__isNat(X)
    mark(U31(X1,X2)) ->
      a__U31(mark(X1),X2)
    mark(U32(X)) -> a__U32(mark(X))
    mark(U41(X1,X2,X3)) ->
      a__U41(mark(X1),X2,X3)
    mark(U42(X1,X2)) ->
      a__U42(mark(X1),X2)
    mark(U43(X)) -> a__U43(mark(X))
    mark(isNatIList(X)) ->
      a__isNatIList(X)
    mark(U51(X1,X2,X3)) ->
      a__U51(mark(X1),X2,X3)
    mark(U52(X1,X2)) ->
      a__U52(mark(X1),X2)
    mark(U53(X)) -> a__U53(mark(X))
    mark(U61(X1,X2,X3)) ->
      a__U61(mark(X1),X2,X3)
    mark(U62(X1,X2)) ->
      a__U62(mark(X1),X2)
    mark(U63(X)) -> a__U63(mark(X))
    mark(U71(X1,X2)) ->
      a__U71(mark(X1),X2)
    mark(length(X)) ->
      a__length(mark(X))
    mark(U81(X)) -> a__U81(mark(X))
    mark(U91(X1,X2,X3,X4)) ->
      a__U91(mark(X1),X2,X3,X4)
    mark(take(X1,X2)) ->
      a__take(mark(X1),mark(X2))
    mark(and(X1,X2)) ->
      a__and(mark(X1),X2)
    mark(isNatIListKind(X)) ->
      a__isNatIListKind(X)
    mark(isNatKind(X)) ->
      a__isNatKind(X)
    mark(cons(X1,X2)) ->
      cons(mark(X1),X2)
    mark(0()) -> 0()
    mark(tt()) -> tt()
    mark(s(X)) -> s(mark(X))
    mark(nil()) -> nil()
    a__zeros() -> zeros()
    a__U11(X1,X2) -> U11(X1,X2)
    a__U12(X) -> U12(X)
    a__isNatList(X) -> isNatList(X)
    a__U21(X1,X2) -> U21(X1,X2)
    a__U22(X) -> U22(X)
    a__isNat(X) -> isNat(X)
    a__U31(X1,X2) -> U31(X1,X2)
    a__U32(X) -> U32(X)
    a__U41(X1,X2,X3) -> U41(X1
                           ,X2
                           ,X3)
    a__U42(X1,X2) -> U42(X1,X2)
    a__U43(X) -> U43(X)
    a__isNatIList(X) ->
      isNatIList(X)
    a__U51(X1,X2,X3) -> U51(X1
                           ,X2
                           ,X3)
    a__U52(X1,X2) -> U52(X1,X2)
    a__U53(X) -> U53(X)
    a__U61(X1,X2,X3) -> U61(X1
                           ,X2
                           ,X3)
    a__U62(X1,X2) -> U62(X1,X2)
    a__U63(X) -> U63(X)
    a__U71(X1,X2) -> U71(X1,X2)
    a__length(X) -> length(X)
    a__U81(X) -> U81(X)
    a__U91(X1,X2,X3,X4) -> U91(X1
                              ,X2
                              ,X3
                              ,X4)
    a__take(X1,X2) -> take(X1,X2)
    a__and(X1,X2) -> and(X1,X2)
    a__isNatIListKind(X) ->
      isNatIListKind(X)
    a__isNatKind(X) -> isNatKind(X))
