WORST_CASE(?,O(n^2))
* Step 1: NaturalMI WORST_CASE(?,O(n^2))
    + Considered Problem:
        - Strict TRS:
            if_mod(false(),s(x),s(y)) -> s(x)
            if_mod(true(),s(x),s(y)) -> mod(minus(x,y),s(y))
            le(0(),y) -> true()
            le(s(x),0()) -> false()
            le(s(x),s(y)) -> le(x,y)
            minus(x,0()) -> x
            minus(s(x),s(y)) -> minus(x,y)
            mod(0(),y) -> 0()
            mod(s(x),0()) -> 0()
            mod(s(x),s(y)) -> if_mod(le(y,x),s(x),s(y))
        - Signature:
            {if_mod/3,le/2,minus/2,mod/2} / {0/0,false/0,s/1,true/0}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {if_mod,le,minus,mod} and constructors {0,false,s,true}
    + Applied Processor:
        NaturalMI {miDimension = 2, miDegree = 2, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Nothing}
    + Details:
        We apply a matrix interpretation of kind constructor based matrix interpretation:
        The following argument positions are considered usable:
          uargs(if_mod) = {1},
          uargs(mod) = {1}
        
        Following symbols are considered usable:
          {if_mod,le,minus,mod}
        TcT has computed the following interpretation:
               p(0) = [4]                                 
                      [0]                                 
           p(false) = [0]                                 
                      [1]                                 
          p(if_mod) = [1 1] x1 + [2 1] x2 + [1 0] x3 + [0]
                      [0 1]      [0 6]      [0 0]      [1]
              p(le) = [0 1] x2 + [2]                      
                      [0 0]      [2]                      
           p(minus) = [1 3] x1 + [1]                      
                      [0 1]      [0]                      
             p(mod) = [2 3] x1 + [1 0] x2 + [3]           
                      [0 6]      [0 0]      [3]           
               p(s) = [1 4] x1 + [2]                      
                      [0 1]      [1]                      
            p(true) = [1]                                 
                      [2]                                 
        
        Following rules are strictly oriented:
        if_mod(false(),s(x),s(y)) = [2 9] x + [1 4] y + [8]  
                                    [0 6]     [0 0]     [8]  
                                  > [1 4] x + [2]            
                                    [0 1]     [1]            
                                  = s(x)                     
        
         if_mod(true(),s(x),s(y)) = [2 9] x + [1 4] y + [10] 
                                    [0 6]     [0 0]     [9]  
                                  > [2 9] x + [1 4] y + [7]  
                                    [0 6]     [0 0]     [3]  
                                  = mod(minus(x,y),s(y))     
        
                        le(0(),y) = [0 1] y + [2]            
                                    [0 0]     [2]            
                                  > [1]                      
                                    [2]                      
                                  = true()                   
        
                     le(s(x),0()) = [2]                      
                                    [2]                      
                                  > [0]                      
                                    [1]                      
                                  = false()                  
        
                    le(s(x),s(y)) = [0 1] y + [3]            
                                    [0 0]     [2]            
                                  > [0 1] y + [2]            
                                    [0 0]     [2]            
                                  = le(x,y)                  
        
                     minus(x,0()) = [1 3] x + [1]            
                                    [0 1]     [0]            
                                  > [1 0] x + [0]            
                                    [0 1]     [0]            
                                  = x                        
        
                 minus(s(x),s(y)) = [1 7] x + [6]            
                                    [0 1]     [1]            
                                  > [1 3] x + [1]            
                                    [0 1]     [0]            
                                  = minus(x,y)               
        
                       mod(0(),y) = [1 0] y + [11]           
                                    [0 0]     [3]            
                                  > [4]                      
                                    [0]                      
                                  = 0()                      
        
                    mod(s(x),0()) = [2 11] x + [14]          
                                    [0  6]     [9]           
                                  > [4]                      
                                    [0]                      
                                  = 0()                      
        
                   mod(s(x),s(y)) = [2 11] x + [1 4] y + [12]
                                    [0  6]     [0 0]     [9] 
                                  > [2 10] x + [1 4] y + [11]
                                    [0  6]     [0 0]     [9] 
                                  = if_mod(le(y,x),s(x),s(y))
        
        
        Following rules are (at-least) weakly oriented:
        

WORST_CASE(?,O(n^2))
