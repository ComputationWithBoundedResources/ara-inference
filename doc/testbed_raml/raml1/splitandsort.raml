type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/splitandsort.raml
 *
 * Author:
 *   Ankush Das, Jan Hoffmann (2015)
 *
 * Description:
 *   Split a list of key value pairs in sublists according to the
 *   keys. Then sort the sublists.
 *)

;;
let rec insert x l =
	let(valX, keyX) = x in
	match l with
	| Nil -> [Pair([valX], keyX)]
	| Cons(l1,ls) ->
		(
		let(vals1, key1) = l1 in
		if ((key1) = (keyX))
		then
			Pair(Cons(valX,vals1), key1)Cons(,ls)
		else
			Pair(vals1, key1)Cons(,insert) x ls)
;;
let rec split l =
	match l with
	| Nil -> Nil
	| Cons(x,xs) -> ( insert x (split xs))
;;
let rec splitqs q =
	let(pivot, l) = q in
	match l with
	| Nil -> Pair(Nil, Nil)
	| Cons(x,xs) ->
		(
		let(ls, rs) = splitqs(pivot, xs) in
		if ((x) > (pivot))
		then
			(ls, Cons(x,rs))
		else
			Pair(Cons(x,ls), rs))
;;
let rec app l ys =
	match l with
	| Nil -> ys
	| Cons(x,xs) -> ( Cons(x,app) xs ys)
;;
let rec quicksort l =
	match l with
	| Nil -> Nil
	| Cons(z,zs) ->
		(
		let(xs, ys) = splitqs(z, zs) in
		app (quicksort xs) (Cons(z,(quicksort ys))))
;;
let rec sortAll l =
	match l with
	| Nil -> Nil
	| Cons(x,xs) ->
		(
		let(vals, key) = x in
		Pair(quicksort vals, key)Cons(,sortAll) xs)
;;
let splitAndSort l =
	sortAll (split l)
;;
let l =
  [ 1,2
  ; 3,50
  ; 1,5
  ; 1,0
  ; 3,40
  ; 2,200
  ; 2,100
  ; 3,80
  ; 1,9
  ; 2,500
  ; 2,400
  ; 1,8
  ]
in
splitAndSort l











;;
