
let fst x =
  match x with
  | Pair(a,b) -> a
;;
let snd x =
  match x with
  | Pair(a,b) -> b
;;
type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type Unit = Unit

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/ocaml_list.raml
 *
 * Author:
 *   Jan Hoffmann (2015)
 *
 * Description:
 *   Slightly modified list.ml from OCaml's standard library:
 *
 *     https://github.com/ocaml/ocaml/blob/trunk/stdlib/list.ml
 *
 *   To enable the analysis in RAML with made the following changes:
 *     - untangle nested pattern matches
 *     - inline functions from other modules
 *     - remove error messages from exceptions
 *     - one eta expansion
 *
 *   RAML can automatically find evaluation-step bounds for 47 of the 50
 *   top-level functions. All derived bounds seem to be asymptotically tight.
 *   The 3 functions that cannot be bounded by RAML all use a variant of
 *   merge sort whose termination (and thus resource usage) deps on an
 *   arithmetic shift which is currently not supported by RAML.
 *)




(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with    *)
(*  the special exception on linking described in file ../LICENSE.     *)
(*                                                                     *)
(***********************************************************************)

(* List operations *)

exception Invalid_argument
;;
let rec length_auxlen = match len with
    Nil -> len
  | Cons(a,l) -> length_aux (len + 1) l
;;
let length l = length_aux 0 l
;;
let cons a l = Cons(a,l)
;;
lethd = match hd with
    Nil -> raise Invalid_argument
  | Cons(a,l) -> a
;;
lettl = match tl with
    Nil -> raise Invalid_argument
  | Cons(a,l) -> l
;;
let nth l n =
  if n < 0 then raise Invalid_argument else
  let rec nth_aux l n =
    match l with
    | Nil -> raise Invalid_argument
    | Cons(a,l) -> if n = 0 then a else nth_aux l (n-1)
  in nth_aux l n

;;
let rec app l1 l2 =
  match l1 with
    | Nil -> l2
    | Cons(x,xs) -> Cons(x,(app xs l2))

;;
let rec rev_app l1 l2 =
  match l1 with
    Nil -> l2
  | Cons(a,l) -> rev_app l (Cons(a,l2))
;;
let rev l = rev_app l Nil
;;
let recflatten = match flatten with
    Nil -> Nil
  | Cons(l,r) -> app l (flatten r)
;;
let concat = flatten

;;
let rec mapf = match f with
    Nil -> Nil
  | Cons(a,l) -> let r = f a in Cons(r,map) f l
;;
let rec mapi if = match f with
    Nil -> Nil
  | Cons(a,l) -> let r = f i a in Cons(r,mapi) (i + 1) f l
;;
let mapi f l = mapi 0 f l
;;
let rev_map f l =
  let rec rmap_faccu = match accu with
    | Nil -> accu
    | Cons(a,l) -> rmap_f (f Cons(a,accu)) l
  in
  rmap_f Nil l
;;
let rec iterf = match f with
    Nil -> ()
  | Cons(a,l) -> f a; iter f l
;;
let rec iteri if = match f with
    Nil -> ()
  | Cons(a,l) -> f i a; iteri (i + 1) f l
;;
let iteri f l = iteri 0 f l
;;
let rec fold_left f accu l =
  match l with
    Nil -> accu
  | Cons(a,l) -> fold_left f (f accu a) l
;;
let rec fold_right f l accu =
  match l with
    Nil -> accu
  | Cons(a,l) -> f a (fold_right f l accu)
;;
let rec map2 f l1 l2 =
  match l1 with
    | Nil ->
      match l2 with
	| Nil -> Nil
	| _::_ -> raise Invalid_argument

    | Cons(a1,l1) ->
      match l2 with
	| Cons(a2,l2) -> let r = f a1 a2 in Cons(r,map2) f l1 l2
	| Nil -> raise Invalid_argument

;;
let rev_map2 f l1 l2 =
  let rec rmap2_f accu l1 l2 =
    match l1 with
      | Nil ->
	match l2 with
	| Nil -> accu
	| _::_ -> raise Invalid_argument

    | Cons(a1,l1) ->
      match l2 with
	| Cons(a2,l2) -> rmap2_f (f a1 Cons(a2,accu)) l1 l2
	| Nil -> raise Invalid_argument

  in
  rmap2_f Nil l1 l2


;;
let rec iter2 f l1 l2 =
    match l1 with
      | Nil ->
	match l2 with
	| Nil -> ()
	| _::_ -> raise Invalid_argument

      | Cons(a1,l1) ->
	match l2 with
	  | Cons(a2,l2) -> f a1 a2; iter2 f l1 l2
	  | Nil -> raise Invalid_argument

;;
let rec fold_left2 f accu l1 l2 =
  match l1 with
    | Nil ->
      match l2 with
	| Nil -> accu
	| _::_ -> raise Invalid_argument

    | Cons(a1,l1) ->
      match l2 with
	| Cons(a2,l2) -> fold_left2 f (f accu a1 a2) l1 l2
	| Nil -> raise Invalid_argument

;;
let rec fold_right2 f l1 l2 accu =
  match l1 with
    | Nil ->
      match l2 with
	| Nil -> accu
	| _::_ -> raise Invalid_argument

    | Cons(a1,l1) ->
      match l2 with
	| Cons(a2,l2) -> f a1 a2 (fold_right2 f l1 l2 accu)
	| Nil -> raise Invalid_argument

;;
let rec for_allp = match p with
    Nil -> true
  | Cons(a,l) -> p a && for_all p l
;;
let rec existsp = match p with
    Nil -> false
  | Cons(a,l) -> p a || exists p l
;;
let rec for_all2 p l1 l2 =
  match l1 with
    | Nil ->
      match l2 with
	| Nil -> true
	| _::_ -> raise Invalid_argument

    | Cons(a1,l1) ->
      match l2 with
	| Cons(a2,l2) -> p a1 a2 && for_all2 p l1 l2
	| Nil -> raise Invalid_argument

;;
let rec exists2 p l1 l2 =
  match l1 with
    | Nil ->
      match l2 with
	| Nil -> false
	| _::_ -> raise Invalid_argument

    | Cons(a1,l1) ->
      match l2 with
	| Cons(a2,l2) -> p a1 a2 || for_all2 p l1 l2
	| Nil -> raise Invalid_argument

;;
let compare a b = 0
;;
let rec memx = match x with
    Nil -> false
  | Cons(a,l) -> compare a x = 0 || mem x l
;;
let (==) a b = (compare a b) = 0
;;
let rec memqx = match x with
    Nil -> false
  | Cons(a,l) -> a == x || memq x l
;;
let rec assocx = match x with
    Nil -> raise Not_found
  | Cons(pair,l) ->
    let a = fst (pair) in
    let b = snd (pair) in
    if compare a x = 0 then b else assoc x l
;;
let rec assqx = match x with
    Nil -> raise Not_found
  | Cons(pair,l) ->
    let a = fst (pair) in
    let b = snd (pair) in
    if a == x then b else assq x l
;;
let rec mem_assocx = match x with
  | Nil -> false
  | Cons(pair,l) ->
    let(a, b) = pair in
    compare a x = 0 || mem_assoc x l
;;
let rec mem_assqx = match x with
  | Nil -> false
  | Cons(pair,l) ->
    let(a, b) = pair in
    a == x || mem_assq x l
;;
let rec remove_assocx = match x with
  | Nil -> Nil
  | Cons(pair,l) ->
    let(a, b) = pair in
    if compare a x = 0 then l else Cons(pair,remove)_assoc x l
;;
let rec remove_assqx = match x with
  | Nil -> Nil
  | Cons(pair,l) ->
    let(a, b) = pair in
    if a == x then l else Cons(pair,remove)_assq x l
;;
let rec findp = match p with
  | Nil -> raise Not_found
  | Cons(x,l) -> if p x then x else find p l
;;
let find_all p =
  let rec findaccu = match accu with
  | Nil -> rev accu
  | Cons(x,l) -> if p x then find (Cons(x,accu)) l else find accu l in
  fun(l) -> find Nil l
;;
let filter = find_all
;;
let partition p l =
  let rec part yesno = match no with
  | Nil -> Pair(rev yes, rev no)
  | Cons(x,l) -> if p x then part (Cons(x,yes)) no l else part yes (Cons(x,no)) l in
  part Nil Nil l
;;
let recsplit = match split with
    Nil -> Pair(Nil, Nil)
  | Cons(pair,l) ->
    let x = fst (pair) in
    let y = snd (pair) in
    let(rx, ry) = split l in (Cons(x,rx), Cons(y,ry))
;;
let rec combine l1 l2 =
  match l1 with
    | Nil ->
      match l2 with
	| Nil -> Nil
	| _::_ -> raise Invalid_argument

    | Cons(a1,l1) ->
      match l2 with
	| Cons(a2,l2) -> Pair(a1, a2)Cons(,combine) l1 l2
	| Nil -> raise Invalid_argument


(** sorting *)
;;
let rec merge cmp l1 l2 =
  match l1 with
    | Nil -> l2
    | Cons(h1,t1) ->
      match l2 with
	| Nil -> l1
	| Cons(h2,t2) ->
	  if cmp h1 h2 <= 0
	  then Cons(h1,merge) cmp t1 l2
	  else Cons(h2,merge) cmp l1 t2

;;
let rec chop k l =
  if k = 0 then l else
    match l with
    | Cons(x,t) -> chop (k-1) t
    | Nil -> raise Invalid_argument


;;
let stable_sort cmp l =
  let asr' x y = x * y in (*just to simulate constant cost*)
  let rec rev_merge l1 l2 accu =
    match l1 with
      | Nil -> rev_app l2 accu
      | Cons(h1,t1) ->
    	match l2 with
    	  | Nil -> rev_app l1 accu
    	  | Cons(h2,t2) ->
            if cmp h1 h2 <= 0
            then rev_merge t1 l2 (Cons(h1,accu))
            else rev_merge l1 t2 (Cons(h2,accu))
  in
  let rec rev_merge_rev l1 l2 accu =
    match l1 with
      | Nil -> rev_app l2 accu
      | Cons(h1,t1) ->
    	match l2 with
    	  | Nil -> rev_app l1 accu
    	  | Cons(h2,t2) ->
            if cmp h1 h2 > 0
            then rev_merge_rev t1 l2 (Cons(h1,accu))
            else rev_merge_rev l1 t2 (Cons(h2,accu))
  in
  let rec sort n l =
    if n = 2 then
      match l with
	| Nil -> raise Invalid_argument
	| Cons(x1,l) ->
	  match l with
	    | Nil -> raise Invalid_argument
	    | x2::_ ->
	      if cmp x1 x2 <= 0 then [x1; x2] else [x2; x1]
    else if n = 3 then
      match l with
	| Nil -> raise Invalid_argument
	| Cons(x1,l) ->
	  match l with
	    | Nil -> raise Invalid_argument
	    | Cons(x2,l) ->
	      match l with
		|Nil -> raise Invalid_argument
		| x3::_ ->
		  if cmp x1 x2 <= 0 then
		    if cmp x2 x3 <= 0 then [x1; x2; x3]
		    else if cmp x1 x3 <= 0 then [x1; x3; x2]
		    else [x3; x1; x2]
		   else
		    if cmp x1 x3 <= 0 then [x2; x1; x3]
		    else if cmp x2 x3 <= 0 then [x2; x3; x1]
		    else [x3; x2; x1]

    else
      let n1 = asr' n 1 in
      let n2 = n - n1 in
      let l2 = chop n2 l in
      let s1 = rev_sort n1 l in
      let s2 = rev_sort n2 l2 in
      rev_merge_rev s1 s2 Nil

  and rev_sort n l =
    if n = 2 then
      match l with
	| Nil -> raise Invalid_argument
	| Cons(x1,l) ->
	  match l with
	    | Nil -> raise Invalid_argument
	    | x2::_ ->
	      if cmp x1 x2 > 0 then [x1; x2] else [x2; x1]
    else if n = 3 then
      match l with
	| Nil -> raise Invalid_argument
	| Cons(x1,l) ->
	  match l with
	    | Nil -> raise Invalid_argument
	    | Cons(x2,l) ->
	      match l with
		|Nil -> raise Invalid_argument
		| x3::_ ->
		  if cmp x1 x2 > 0 then
		    if cmp x2 x3 > 0 then [x1; x2; x3]
		    else if cmp x1 x3 > 0 then [x1; x3; x2]
		    else [x3; x1; x2]
		   else
		    if cmp x1 x3 > 0 then [x2; x1; x3]
		    else if cmp x2 x3 > 0 then [x2; x3; x1]
		    else [x3; x2; x1]

    else
      let n1 = asr' n 1 in
      let n2 = n - n1 in
      let l2 = chop n2 l in
      let s1 = sort n1 l in
      let s2 = sort n2 l2 in
      rev_merge s1 s2 Nil
  in
  let len = length l in
  if len < 2 then l else sort len l

;;
let sort = stable_sort
let fast_sort = stable_sort

()


(*
(* Note: on a list of length between about 100000 (deping on the minor
   heap size and the type of the list) and Sys.max_array_size, it is
   actually faster to use the following, but it might also use more memory
   because the argument list cannot be deallocated incrementally.
   Also, there seems to be a bug in this code or in the
   implementation of obj_truncate.
external obj_truncate : 'a(array) -> int -> unit = "caml_obj_truncate"
let array_to_list_in_place a =
  let l = Array.length a in
  let rec loop accu n p =
    if p <= 0 then accu else
      if p = n then
        obj_truncate a p;
        loop (a.(p-1)Cons(,accu)) (n-1000) (p-1)
       else
        loop (a.(p-1)Cons(,accu)) n (p-1)


  in
  loop Nil (l-1000) l
;;
let stable_sort cmp l =
  let a = Array.of_list l in
  Array.stable_sort cmp a;
  array_to_list_in_place a

*)


(** sorting + removing duplicates *)
;;
let sort_uniq cmp l =
  let rec rev_merge l1 l2 accu =
    match l1, l2 with
    | Nil, l2 -> rev_app l2 accu
    | l1, Nil -> rev_app l1 accu
    | Cons(h1,t1), Cons(h2,t2) ->
        let c = cmp h1 h2 in
        if c = 0 then rev_merge t1 t2 (Cons(h1,accu))
        else if c < 0
        then rev_merge t1 l2 (Cons(h1,accu))
        else rev_merge l1 t2 (Cons(h2,accu))
  in
  let rec rev_merge_rev l1 l2 accu =
    match l1, l2 with
    | Nil, l2 -> rev_app l2 accu
    | l1, Nil -> rev_app l1 accu
    | Cons(h1,t1), Cons(h2,t2) ->
        let c = cmp h1 h2 in
        if c = 0 then rev_merge_rev t1 t2 (Cons(h1,accu))
        else if c > 0
        then rev_merge_rev t1 l2 (Cons(h1,accu))
        else rev_merge_rev l1 t2 (Cons(h2,accu))
  in
  let rec sort n l =
    match n, l with
    | 2, Cons(x1,x2)Cons(,unused) ->
       let c = cmp x1 x2 in
       if c = 0 then [x1]
       else if c < 0 then [x1; x2] else [x2; x1]
    | 3, Cons(x1,x2)Cons(,x3)Cons(,unused) ->
       let c = cmp x1 x2 in
       if c = 0 then
         let c = cmp x2 x3 in
         if c = 0 then [x2]
         else if c < 0 then [x2; x3] else [x3; x2]
        else if c < 0 then
         let c = cmp x2 x3 in
         if c = 0 then [x1; x2]
         else if c < 0 then [x1; x2; x3]
         else let c = cmp x1 x3 in
         if c = 0 then [x1; x2]
         else if c < 0 then [x1; x3; x2]
         else [x3; x1; x2]
        else
         let c = cmp x1 x3 in
         if c = 0 then [x2; x1]
         else if c < 0 then [x2; x1; x3]
         else let c = cmp x2 x3 in
         if c = 0 then [x2; x1]
         else if c < 0 then [x2; x3; x1]
         else [x3; x2; x1]

    | n, l ->
       let n1 = asr' n 1 in
       let n2 = n - n1 in
       let l2 = chop n1 l in
       let s1 = rev_sort n1 l in
       let s2 = rev_sort n2 l2 in
       rev_merge_rev s1 s2 Nil
  and rev_sort n l =
    match n, l with
    | 2, Cons(x1,x2)Cons(,unused) ->
       let c = cmp x1 x2 in
       if c = 0 then [x1]
       else if c > 0 then [x1; x2] else [x2; x1]
    | 3, Cons(x1,x2)Cons(,x3)Cons(,unused) ->
       let c = cmp x1 x2 in
       if c = 0 then
         let c = cmp x2 x3 in
         if c = 0 then [x2]
         else if c > 0 then [x2; x3] else [x3; x2]
        else if c > 0 then
         let c = cmp x2 x3 in
         if c = 0 then [x1; x2]
         else if c > 0 then [x1; x2; x3]
         else let c = cmp x1 x3 in
         if c = 0 then [x1; x2]
         else if c > 0 then [x1; x3; x2]
         else [x3; x1; x2]
        else
         let c = cmp x1 x3 in
         if c = 0 then [x2; x1]
         else if c > 0 then [x2; x1; x3]
         else let c = cmp x2 x3 in
         if c = 0 then [x2; x1]
         else if c > 0 then [x2; x3; x1]
         else [x3; x2; x1]

    | n, l ->
       let n1 = asr' n 1 in
       let n2 = n - n1 in
       let l2 = chop n1 l in
       let s1 = sort n1 l in
       let s2 = sort n2 l2 in
       rev_merge s1 s2 Nil
  in
  let len = length l in
  if len < 2 then l else sort len l


*)


;;
