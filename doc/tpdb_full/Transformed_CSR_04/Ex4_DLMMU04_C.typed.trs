(STRATEGY
    INNERMOST)

(VAR
    IL L M N T X X1 X2 X3 X4)
(DATATYPES
    A = ÂµX.< tt, mark(X), 0, zeros, nil, ok(X) >)
(SIGNATURES
    active :: [A] -> A
    and :: [A x A] -> A
    s :: [A] -> A
    length :: [A] -> A
    cons :: [A x A] -> A
    take :: [A x A] -> A
    uTake1 :: [A] -> A
    uTake2 :: [A x A x A x A] -> A
    uLength :: [A x A] -> A
    proper :: [A] -> A
    isNatIList :: [A] -> A
    isNatList :: [A] -> A
    isNat :: [A] -> A
    top :: [A] -> A)
(RULES
    active(and(tt(),T)) -> mark(T)
    active(isNatIList(IL)) ->
      mark(isNatList(IL))
    active(isNat(0())) -> mark(tt())
    active(isNat(s(N))) ->
      mark(isNat(N))
    active(isNat(length(L))) ->
      mark(isNatList(L))
    active(isNatIList(zeros())) ->
      mark(tt())
    active(isNatIList(cons(N
                          ,IL))) -> mark(and(isNat(N)
                                            ,isNatIList(IL)))
    active(isNatList(nil())) ->
      mark(tt())
    active(isNatList(cons(N,L))) ->
      mark(and(isNat(N),isNatList(L)))
    active(isNatList(take(N,IL))) ->
      mark(and(isNat(N)
              ,isNatIList(IL)))
    active(zeros()) -> mark(cons(0()
                                ,zeros()))
    active(take(0(),IL)) ->
      mark(uTake1(isNatIList(IL)))
    active(uTake1(tt())) ->
      mark(nil())
    active(take(s(M),cons(N,IL))) ->
      mark(uTake2(and(isNat(M)
                     ,and(isNat(N),isNatIList(IL)))
                 ,M
                 ,N
                 ,IL))
    active(uTake2(tt(),M,N,IL)) ->
      mark(cons(N,take(M,IL)))
    active(length(cons(N,L))) ->
      mark(uLength(and(isNat(N)
                      ,isNatList(L))
                  ,L))
    active(uLength(tt(),L)) ->
      mark(s(length(L)))
    active(and(X1,X2)) ->
      and(active(X1),X2)
    active(and(X1,X2)) -> and(X1
                             ,active(X2))
    active(s(X)) -> s(active(X))
    active(length(X)) ->
      length(active(X))
    active(cons(X1,X2)) ->
      cons(active(X1),X2)
    active(take(X1,X2)) ->
      take(active(X1),X2)
    active(take(X1,X2)) -> take(X1
                               ,active(X2))
    active(uTake1(X)) ->
      uTake1(active(X))
    active(uTake2(X1,X2,X3,X4)) ->
      uTake2(active(X1),X2,X3,X4)
    active(uLength(X1,X2)) ->
      uLength(active(X1),X2)
    and(mark(X1),X2) -> mark(and(X1
                                ,X2))
    and(X1,mark(X2)) -> mark(and(X1
                                ,X2))
    s(mark(X)) -> mark(s(X))
    length(mark(X)) ->
      mark(length(X))
    cons(mark(X1),X2) ->
      mark(cons(X1,X2))
    take(mark(X1),X2) ->
      mark(take(X1,X2))
    take(X1,mark(X2)) ->
      mark(take(X1,X2))
    uTake1(mark(X)) ->
      mark(uTake1(X))
    uTake2(mark(X1),X2,X3,X4) ->
      mark(uTake2(X1,X2,X3,X4))
    uLength(mark(X1),X2) ->
      mark(uLength(X1,X2))
    proper(and(X1,X2)) ->
      and(proper(X1),proper(X2))
    proper(tt()) -> ok(tt())
    proper(isNatIList(X)) ->
      isNatIList(proper(X))
    proper(isNatList(X)) ->
      isNatList(proper(X))
    proper(isNat(X)) ->
      isNat(proper(X))
    proper(0()) -> ok(0())
    proper(s(X)) -> s(proper(X))
    proper(length(X)) ->
      length(proper(X))
    proper(zeros()) -> ok(zeros())
    proper(cons(X1,X2)) ->
      cons(proper(X1),proper(X2))
    proper(nil()) -> ok(nil())
    proper(take(X1,X2)) ->
      take(proper(X1),proper(X2))
    proper(uTake1(X)) ->
      uTake1(proper(X))
    proper(uTake2(X1,X2,X3,X4)) ->
      uTake2(proper(X1)
            ,proper(X2)
            ,proper(X3)
            ,proper(X4))
    proper(uLength(X1,X2)) ->
      uLength(proper(X1),proper(X2))
    and(ok(X1),ok(X2)) -> ok(and(X1
                                ,X2))
    isNatIList(ok(X)) ->
      ok(isNatIList(X))
    isNatList(ok(X)) ->
      ok(isNatList(X))
    isNat(ok(X)) -> ok(isNat(X))
    s(ok(X)) -> ok(s(X))
    length(ok(X)) -> ok(length(X))
    cons(ok(X1),ok(X2)) ->
      ok(cons(X1,X2))
    take(ok(X1),ok(X2)) ->
      ok(take(X1,X2))
    uTake1(ok(X)) -> ok(uTake1(X))
    uTake2(ok(X1)
          ,ok(X2)
          ,ok(X3)
          ,ok(X4)) -> ok(uTake2(X1
                               ,X2
                               ,X3
                               ,X4))
    uLength(ok(X1),ok(X2)) ->
      ok(uLength(X1,X2))
    top(mark(X)) -> top(proper(X))
    top(ok(X)) -> top(active(X)))
