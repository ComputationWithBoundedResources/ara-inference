
let rec leqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
              | 0 -> True
              | S(y') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/constant_time/ipquery.raml
 *
 * Author:
 *   Matt Fredrikson (S(S(0))016)
 *
 * Description:
 *
 *)

;;
type ip = Ip of int * int * int * int
type logline = Line of ip * int
;;
let reverse l =
  let rec reverse_aux a l' =
    
    match l' with
    | Nil()-> a
    | Cons(h,t) -> reverse_aux (Cons(h,a)) t
  in reverse_aux Nil l
;;
let map f bag =
  let rec map_aux a bag' =
    
    match bag' with
    | Nil()-> reverse a
    | (Cons(h,Cons(t) -> map_aux ((f h,a)))) t
  in map_aux Nil bag
;;
let sum (bag list) =
  let rec sum_aux (a) bag' =
    
    match bag' with
    | Nil()-> a
    | Cons(h,t) -> sum_aux (a + h) t
  in sum_aux 0 bag
;;
let size bag =
  let rec size_aux (a) bag' =
    
    match bag' with
    | Nil()-> a
    | Cons(h,t) -> size_aux (a + S(0)) t
  in size_aux 0 bag
;;
let split pred bag =
  let rec split_aux bag' in_bag out_bag =
    
    match bag' with
    | Nil()-> (in_bag, out_bag)
    | Cons(h,t) ->
      let pred_result = pred h in
      let (new_in, new_out) =
        ite ((pred h) ((Cons(h,in)_bag, out_bag)))
        ((in_bag, Cons(h,out)_bag))
      in
      split_aux t new_in new_out
  in split_aux bag Nil Nil
;;
let rec fold_left f acc l =
  match l with
  | Nil()-> acc
  | Cons(x,xs) -> fold_left f (f acc x) xs
;;
let webserverlog_list preds log =
  let apply_pred acc pred =
    let (loglist, ac) = acc in
    let (a,b) = ac in
    let (inl, outl) = split pred loglist in
    let insize = size inl in
    let outsize = size outl in
    (loglist, (Cons(insize,a),Cons(outsize,b)))
  in
  let (loglist, predcounts) = fold_left apply_pred (log, (Nil,Nil)) preds in
  predcounts
;;
let q line =
  match line with
  | Line()(ipaddr, code) ->
    match ipaddr with
    | Ip()(ip1,ip2,ip3,ip4) -> ip1 = S(S(S(S(S(S(0))))))6 && ip2 = S(S(0))49 && ip3 = 71
;;
let row1 = Line (Ip (S(0)92,168,0,1), S(0)0)
let row2 = Line (Ip (S(0)92,168,0,2), S(S(S(0))))
let row3 = Line (Ip (S(0)92,168,0,3), S(0)00)
let row4 = Line (Ip (S(0)92,168,0,4), S(0)0)
let row5 = Line (Ip (S(0),2,3,0), S(0)0)
;;
let db = (Cons(row1,Cons( row2,Cons( row3,Cons( row4,Cons( row5,Nil))))))
;;
let main apache_log =
  let cnts = webserverlog_list (Cons(q,Nil)) apache_log in
  cnts
;;
let main = main db
;;
