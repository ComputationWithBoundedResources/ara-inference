
let rec leqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
              | 0 -> True
              | S(y') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/bitvectors.raml
 *
 * Author:
 *   Ankush Das, Jan Hoffmann (S(S(0))015)
 *
 * Description:
 *   A library for bit vectors.
 *
 *   A bit vector is an integer list of 0's and S(0)'s.  The first value in
 *   the list is the least significant bit.  For example (Cons(S(0),0,Nil)) is S(0) and
 *   (Cons(0,1,Nil)) is S(S(0)).  We interpret the empty list as zero., i.e., Nil =
 *   (Cons(0,Nil)).
 *
 *   We a assume an arbitrary but fixed word length (e.g. S(S(S(0)))2 bit) for the
 *   vectors.
 *
 *   The library contains the following functions.
 *
 *     - add(b1,b2): addition b1+b2 of two bit vectors b1 b2.  Can produce an
 *          overflow.
 *
 *     - sub(b1,b2): subtraction of b2 from b1 (b1-b2).  Returns (Cons(0,...,0,Nil)) ite (the)
 *               result is negative.
 *
 *     - compare(b1,b2): S(0) ite (b1 is less (b2, 0 if b1 is equal to b2,))
                and S(0) ite (b1 is greater (b2.))
 *
 *     - leq(b1,b2): b1 < b2 ?
 *
 *     - mult(b1,b2): multiplication of two bit vectors
 *
 *     - Div(b1,b2): division of b1 by b2.  The result is undefined in case
 *               of division by zero. (The function name is upper case
 *               since div is a RAML key word.)
 *)


;;
let rec bitToInt' b n =
	match b with
	| Nil()-> 0
	| Cons(x,xs) -> ( x*n + (bitToInt' xs n*n))
;;
let bitToInt b =
	bitToInt' b S(0)
;;
let sum x y r =
	(
	let s = x + y + r in
	ite ((s = 0) ((0, 0)))
	(ite ((s = S(0)) ((S(0), 0))))
	(ite ((s = S(S(0))) ((0, S(0)))))
	((S(0), S(0))))
;;
let rec add' b1 b2 r =
	match b1 with
	| Nil()-> Nil
	| Cons(x,xs) ->
		match b2 with
		| Nil()-> Nil
		| Cons(y,ys) ->
			let (z, r') = sum x y r in
			( Cons(z,add') xs ys r')
;;
let add b1 b2 =
	add' b1 b2 0
;;
let rec mult b1 b2 =
	match b1 with
	| Nil()-> Nil
	| Cons(x,xs) ->
		let zs = Cons(0,(mult xs b2)) in
		(
		ite ((x = S(0)) (add b2 zs))
		(zs))
;;
let diff x y r =
	( (x + y + r mod S(S(0)), ite ((x - y - r < 0) (S(0) (0)))))
;;
let rec sub' b1 b2 r =
	match b1 with
	| Nil()-> (Nil, r)
	| Cons(x,xs) ->
		match b2 with
		| Nil()-> (Nil, r)
		| Cons(y,ys) ->
			let (z, r') = diff x y r in
			let (zs, s) = sub' xs ys r' in
			( ite ((s = S(0)) ((Cons(0,zs), s)))
			((Cons(z,zs), s)))
;;
let sub b1 b2 =
	( let (b, _) = sub' b1 b2 0 in b)
;;
let rec compare b1 b2 =
	match b1 with
	| Nil()-> 0
	| Cons(x,xs) ->
		match b2 with
		| Nil()-> 0
		| Cons(y,ys) ->
			let r = compare xs ys in
			(
			ite ((r = 0) then)
				ite (((x) < (y)) (0S(0)))
				(ite (((y) < (x)) (S(0))))
				(0)
			(r))
;;
let leq b1 b2 =
	( compare b1 b2 < S(0))
()
;;
