(VAR
    l ls pivot rs x xs y ys z zs)

(DATATYPES
   a = < #false, #true >
   b = µX. < dd(c,X), nil >
   c = µX. < #0, #neg(X), #pos(X), #s(X) >
   d = < tuple#2(b,b) >
   e = < #EQ, #GT, #LT >
 )

(SIGNATURES
   #abs :: c -> c
   #greater :: c x c -> a
   #compare :: c x c -> e
   #ckgt :: e -> a
   append :: b x b -> b
   append#1 :: b x b -> b
   appendD :: b x b -> b
   appendD#1 :: b x b -> b
   quicksort :: b -> b
   quicksort#1 :: b -> b
   split :: c x b -> d
   quicksort#2 :: d x c -> b
   quicksortD :: b -> b
   quicksortD#1 :: b -> b
   splitD :: c x b -> d
   quicksortD#2 :: d x c -> b
   split#1 :: b x c -> d
   split#2 :: d x c x c -> d
   split#3 :: a x b x b x c -> d
   splitD#1 :: b x c -> d
   splitD#2 :: d x c x c -> d
   splitD#3 :: a x b x b x c -> d
 )

(RULES
    #abs(#0) -> #0
    #abs(#neg(x)) -> #pos(x)
    #abs(#pos(x)) -> #pos(x)
    #abs(#s(x)) -> #pos(#s(x))
    #greater(x,y) -> #ckgt(#compare(x,y))
    append(l,ys) -> append#1(l,ys)
    append#1(dd(x,xs),ys) -> dd(x,append(xs,ys))
    append#1(nil,ys) -> ys
    appendD(l,ys) -> appendD#1(l,ys)
    appendD#1(dd(x,xs),ys) -> dd(x,appendD(xs,ys))
    appendD#1(nil,ys) -> ys
    quicksort(l) -> quicksort#1(l)
    quicksort#1(dd(z,zs)) -> quicksort#2(split(z,zs),z)
    quicksort#1(nil) -> nil
    quicksort#2(tuple#2(xs,ys),z) -> append(quicksort(xs),dd(z,quicksort(ys)))
    quicksortD(l) -> quicksortD#1(l)
    quicksortD#1(dd(z,zs)) -> quicksortD#2(splitD(z,zs),z)
    quicksortD#1(nil) -> nil
    quicksortD#2(tuple#2(xs,ys),z) -> appendD(quicksortD(xs),dd(z,quicksortD(ys)))
    split(pivot,l) -> split#1(l,pivot)
    split#1(dd(x,xs),pivot) -> split#2(split(pivot,xs),pivot,x)
    split#1(nil,pivot) -> tuple#2(nil,nil)
    split#2(tuple#2(ls,rs),pivot,x) -> split#3(#greater(x,pivot),ls,rs,x)
    split#3(#false,ls,rs,x) -> tuple#2(dd(x,ls),rs)
    split#3(#true,ls,rs,x) -> tuple#2(ls,dd(x,rs))
    splitD(pivot,l) -> splitD#1(l,pivot)
    splitD#1(dd(x,xs),pivot) -> splitD#2(splitD(pivot,xs),pivot,x)
    splitD#1(nil,pivot) -> tuple#2(nil,nil)
    splitD#2(tuple#2(ls,rs),pivot,x) -> splitD#3(#greater(x,pivot),ls,rs,x)
    splitD#3(#false,ls,rs,x) -> tuple#2(dd(x,ls),rs)
    splitD#3(#true,ls,rs,x) -> tuple#2(ls,dd(x,rs))
    #ckgt(#EQ) -> #false
    #ckgt(#GT) -> #true
    #ckgt(#LT) -> #false
    #compare(#0,#0) -> #EQ
    #compare(#0,#neg(y)) -> #GT
    #compare(#0,#pos(y)) -> #LT
    #compare(#0,#s(y)) -> #LT
    #compare(#neg(x),#0) -> #LT
    #compare(#neg(x),#neg(y)) -> #compare(y,x)
    #compare(#neg(x),#pos(y)) -> #LT
    #compare(#pos(x),#0) -> #GT
    #compare(#pos(x),#neg(y)) -> #GT
    #compare(#pos(x),#pos(y)) -> #compare(x,y)
    #compare(#s(x),#0) -> #GT
    #compare(#s(x),#s(y)) -> #compare(x,y))
