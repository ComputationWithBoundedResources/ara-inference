(VAR IL L M N V V1 V2 X X1 X2 )
(STRATEGY INNERMOST)
(RULES 
        zeros -> cons(0,n__zeros)
        U101(tt,V1,V2) -> U102(isNatKind(activate(V1)),activate(V1),activate(V2))
        U102(tt,V1,V2) -> U103(isNatIListKind(activate(V2)),activate(V1),activate(V2))
        U103(tt,V1,V2) -> U104(isNatIListKind(activate(V2)),activate(V1),activate(V2))
        U104(tt,V1,V2) -> U105(isNat(activate(V1)),activate(V2))
        U105(tt,V2) -> U106(isNatIList(activate(V2)))
        U106(tt) -> tt
        U11(tt,V1) -> U12(isNatIListKind(activate(V1)),activate(V1))
        U111(tt,L,N) -> U112(isNatIListKind(activate(L)),activate(L),activate(N))
        U112(tt,L,N) -> U113(isNat(activate(N)),activate(L),activate(N))
        U113(tt,L,N) -> U114(isNatKind(activate(N)),activate(L))
        U114(tt,L) -> s(length(activate(L)))
        U12(tt,V1) -> U13(isNatList(activate(V1)))
        U121(tt,IL) -> U122(isNatIListKind(activate(IL)))
        U122(tt) -> nil
        U13(tt) -> tt
        U131(tt,IL,M,N) -> U132(isNatIListKind(activate(IL)),activate(IL),activate(M),activate(N))
        U132(tt,IL,M,N) -> U133(isNat(activate(M)),activate(IL),activate(M),activate(N))
        U133(tt,IL,M,N) -> U134(isNatKind(activate(M)),activate(IL),activate(M),activate(N))
        U134(tt,IL,M,N) -> U135(isNat(activate(N)),activate(IL),activate(M),activate(N))
        U135(tt,IL,M,N) -> U136(isNatKind(activate(N)),activate(IL),activate(M),activate(N))
        U136(tt,IL,M,N) -> cons(activate(N),n__take(activate(M),activate(IL)))
        U21(tt,V1) -> U22(isNatKind(activate(V1)),activate(V1))
        U22(tt,V1) -> U23(isNat(activate(V1)))
        U23(tt) -> tt
        U31(tt,V) -> U32(isNatIListKind(activate(V)),activate(V))
        U32(tt,V) -> U33(isNatList(activate(V)))
        U33(tt) -> tt
        U41(tt,V1,V2) -> U42(isNatKind(activate(V1)),activate(V1),activate(V2))
        U42(tt,V1,V2) -> U43(isNatIListKind(activate(V2)),activate(V1),activate(V2))
        U43(tt,V1,V2) -> U44(isNatIListKind(activate(V2)),activate(V1),activate(V2))
        U44(tt,V1,V2) -> U45(isNat(activate(V1)),activate(V2))
        U45(tt,V2) -> U46(isNatIList(activate(V2)))
        U46(tt) -> tt
        U51(tt,V2) -> U52(isNatIListKind(activate(V2)))
        U52(tt) -> tt
        U61(tt,V2) -> U62(isNatIListKind(activate(V2)))
        U62(tt) -> tt
        U71(tt) -> tt
        U81(tt) -> tt
        U91(tt,V1,V2) -> U92(isNatKind(activate(V1)),activate(V1),activate(V2))
        U92(tt,V1,V2) -> U93(isNatIListKind(activate(V2)),activate(V1),activate(V2))
        U93(tt,V1,V2) -> U94(isNatIListKind(activate(V2)),activate(V1),activate(V2))
        U94(tt,V1,V2) -> U95(isNat(activate(V1)),activate(V2))
        U95(tt,V2) -> U96(isNatList(activate(V2)))
        U96(tt) -> tt
        isNat(n__0) -> tt
        isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)),activate(V1))
        isNat(n__s(V1)) -> U21(isNatKind(activate(V1)),activate(V1))
        isNatIList(V) -> U31(isNatIListKind(activate(V)),activate(V))
        isNatIList(n__zeros) -> tt
        isNatIList(n__cons(V1,V2)) -> U41(isNatKind(activate(V1)),activate(V1),activate(V2))
        isNatIListKind(n__nil) -> tt
        isNatIListKind(n__zeros) -> tt
        isNatIListKind(n__cons(V1,V2)) -> U51(isNatKind(activate(V1)),activate(V2))
        isNatIListKind(n__take(V1,V2)) -> U61(isNatKind(activate(V1)),activate(V2))
        isNatKind(n__0) -> tt
        isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
        isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
        isNatList(n__nil) -> tt
        isNatList(n__cons(V1,V2)) -> U91(isNatKind(activate(V1)),activate(V1),activate(V2))
        isNatList(n__take(V1,V2)) -> U101(isNatKind(activate(V1)),activate(V1),activate(V2))
        length(nil) -> 0
        length(cons(N,L)) -> U111(isNatList(activate(L)),activate(L),N)
        take(0,IL) -> U121(isNatIList(IL),IL)
        take(s(M),cons(N,IL)) -> U131(isNatIList(activate(IL)),activate(IL),M,N)
        zeros -> n__zeros
        take(X1,X2) -> n__take(X1,X2)
        0 -> n__0
        length(X) -> n__length(X)
        s(X) -> n__s(X)
        cons(X1,X2) -> n__cons(X1,X2)
        nil -> n__nil
        activate(n__zeros) -> zeros
        activate(n__take(X1,X2)) -> take(X1,X2)
        activate(n__0) -> 0
        activate(n__length(X)) -> length(X)
        activate(n__s(X)) -> s(X)
        activate(n__cons(X1,X2)) -> cons(X1,X2)
        activate(n__nil) -> nil
        activate(X) -> X
        
)
    