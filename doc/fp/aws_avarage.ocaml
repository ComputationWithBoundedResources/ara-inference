
let rec leqNat y x =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
             | 0 -> False
             | S(x') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b


(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Case  * *
 *
 * File:
 *   examples/aws/sort_average.raml
 *
 * Author:
 *   Jan Hoffmann, Ronghui Gu (S(S(0))015)
 *
 * Description:
 *   Using Amazon's DynamoDB to sort students according to their avarage grades.
 *)
;;
type ('a,'b) exception = Not_found of 'a * 'b
;;
type 'a option = None | Some of 'a
;;
let db_query student_id course_id =
    Some S(0)
;;
let rec append l1 l2 =
  match l1 with
    | Nil()-> l2
    | Cons(x,xs) -> Cons(x,(append xs l2))
;;
let rec partition gt acc l =
  match l with
    | Nil()-> acc
    | Cons(x,xs) ->
      let (cs,bs,acc) = acc in
      let (is_greater,acc') = gt x acc in
      ite (is_greater then)
  	partition gt (cs,Cons(x,bs),acc') xs
      else
  	partition gt (Cons(x,cs),bs,acc') xs
;;
let rec quicksort gt acc l = match l with
  | Nil()-> (Nil,acc)
  | Cons(x,xs) ->
    let ys, zs, acc' = partition (gt x) (Nil,Nil,acc) xs in
    let (l1,acc'') = quicksort gt acc' ys in
    let (l2,acc''') = quicksort gt acc'' zs in
    (append  (Cons(x,l1)) l2, acc''')

;;
let rec foldl f acc l =
  match l with
    | Nil()-> acc
    | Cons(x,xs) -> foldl f (f acc x) xs
;;
let average_grade student_id course_ids =
  let f acc cid =
    let (length,sum) = acc in
    let grade = match db_query student_id cid with
      | Some(q) -> q
      | None()-> error (Not_found (student_id,cid))
    in
    (length +. S(0), sum +. grade)
  in
  let (length,sum) = foldl f (0.0,0.0) course_ids in
  sum /. length
;;
let greater_eq sid1 sid2 course_ids =
  (average_grade sid1 course_idgeqNat s average_grade sid2 course_ids, course_ids)
;;
let sort_students student_ids course_ids =
  let (sorted_sids, acc) = quicksort greater_eq course_ids student_ids in
  sorted_sids

;;
let rec map f l =
  match l with
    | Nil()-> Nil
    | (Cons(x,Cons(xs) -> (f x,(map f xs))))
;;
let make_table student_ids course_ids =

  let rec mk_table sids cids =
    match sids with
      | Nil()-> Nil
      | Cons(x,xs) ->
	let cid_map =
	  let f cid =
	    let grade =
	      match db_query x cid with
	  	| Some(q) -> q
	  	| None()-> error (Not_found (x,cid))
	    in
	    (cid,grade)
	  in
	  map f cids
	in
	(x,cid_map)Cons(,(mk_table xs cids))
  in
  mk_table student_ids course_ids

;;
let rec find f l =
  match l with
    | Nil()-> error (Not_found (S(0),S(0)))
    | Cons(x,xs) ->
      let (key,value) = x in
      ite (f key then)
	value
      else
	find f xs
;;
let lookup sid cid table =
  let cid_map = find (fun (id) -> id = sid) table in
  find (fun (id) -> id = cid) cid_map

;;
let average_grade' student_id course_ids table =
  let f acc cid =
    let (length,sum,table) = acc in
    let grade = lookup student_id cid table in
    (length +. S(0), sum +. grade, table)
  in
  let (length,sum,table') = foldl f (0.0,0.0,table) course_ids in
  (sum /. length,table')

;;
let greater_eq' course_ids sid1 sid2 table =
  let (grade1, table1) = average_grade' sid1 course_ids table in
  let (grade2, table2) = average_grade' sid2 course_ids table1 in
  (grade1 >= grade2, table2)

;;
let sort_students_efficient student_ids course_ids =
  let (sorted_sids, acc) = quicksort (greater_eq' course_ids)  (make_table student_ids course_ids) student_ids in
  sorted_sids
;;
let students = (Cons(S(0),Cons(S(S(0)),Cons(S(S(S(0))),Cons(S(S(S(S(0)))),Cons(S(S(S(S(S(0))))),Cons(S(S(S(S(S(S(0)))))),Nil)))))))
let courses = [12;13;14;15;16;17;18]
;;
let main = sort_students students courses

(* let unused = sort_students_efficient students courses *)


;;
