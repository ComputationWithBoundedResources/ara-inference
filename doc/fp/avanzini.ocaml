
let rec leqNat y x =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
             | 0 -> False
             | S(x') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/avanzini.raml
 *
 * Author:
 *   Jan Hoffmann, Shu-Chun Weng (S(S(0))015)
 *
 * Description:
 *   Example from the paper "Analysing the Complexity of Functional Programs: Higher-Order Meets First-Order"
 *   by Avanzini et al. which appeared at ICFP'15.
 *
 *)
;;
let rec append l1 l2 =
  match l1 with
    | Nil()-> l2
    | Cons(x,xs) -> Cons(x,(append xs l2))

;;
let rec partition f l =
  match l with
    | Nil()-> (Nil,Nil)
    | Cons(x,xs) ->
      let (cs,bs) = partition f xs in
      ite (f x then)
	(cs,Cons(x,bs))
      else
	(Cons(x,cs),bs)

;;
let rec quicksort gt xyz = match xyz with
  | Nil()-> Nil
  | Cons(x,xs) ->
      let ys, zs = partition (gt x) xs in
      append (quicksort gt ys) (Cons(x,(quicksort gt zs)))
;;
type ('a, 'b) either = Left of 'a | Right of 'b
;;
let comp f x g = fun z -> f x (g z)
;;
let rec walk f xs =
  match xs with
    | Nil()-> (fun z ->  z)
    | Cons(x,ys) -> match x with
	| Left(unused) -> fun y -> comp (walk f) ys (fun z -> Cons(x,z)) y
	| Right(l) ->
	  let x' = Right (quicksort f l) in
	  fun y -> comp (walk f) ys (fun z -> Cons(x',z)) y
;;
let rev_sort f l = walk f l Nil
;;
let main = rev_sort (fun a b -> leqNat a b) (Cons(Right (Cons(S(S(S(0))),Cons(S(S(0)),Cons(S(0),Nil)))),Cons( Right (Cons(S(S(0)),Cons(S(0),Cons(0,Cons(S(0),Nil))))),Cons( Left S(0),Cons( Left S(S(0)),Cons( Left S(S(S(0))),Cons( Right Nil,Nil)))))))


(* let rec walk xs = *)
(*   match xs with *)
(*     | Nil -> (fun z ->  z) *)
(*     | Cons(x,ys) -> fun y -> comp walk ys (fun z -> Cons(x,z)) y  *)

(* let rev l = walk l Nil  *)

;;
