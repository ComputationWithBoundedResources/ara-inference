type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit

(** val string_dec : char(list) -> char(list) -> bool **)
;;
let rec string_dec s s0 =
  match s with
  | Nil ->
    (match s0 with
     | Nil -> true
     | Cons(a,s1) -> false)
  | Cons(a,s1) ->
    (match s0 with
     | Nil -> false
     | Cons(a0,s2) -> if ((a:int) = (a0:int) ) then string_dec s1 s2 else false)

(** val prefix : char(list) -> char(list) -> bool **)
;;
let rec prefix s1 s2 =
  match s1 with
  | Nil -> true
  | Cons(a,s1') ->
    (match s2 with
     | Nil -> false
     | Cons(b,s2') -> if ((a:int) = (b:int)) then prefix s1' s2' else false)

 ()









;;
