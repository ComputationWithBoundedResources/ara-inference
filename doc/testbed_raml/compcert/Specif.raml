type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit
;;
type 'a coq_sig =
  'a
  Pair(* singleton inductive, whose constructor was exist *)
;;
type 'a sig2 =
  'a
  Pair(* singleton inductive, whose constructor was exist2 *)
;;
type ('a, 'p) sigT =
| Coq_existT of 'a * 'p

(** val projT1 : Pair('a1, 'a2) sigT -> 'a1 **)
;;
let projT1 = function(x) ->
match x with
| Coq_existT(a, p) -> a

(** val projT2 : Pair('a1, 'a2) sigT -> 'a2 **)
;;
let projT2 = function(x) ->
match x with
| Coq_existT(x0, h) -> h
;;
type 'a coq_Exc = 'a option

(** val value : 'a1 -> 'a1 option **)
;;
let value x =
  Some x

(** val error : 'a1 option **)
;;
let error =
  None

 ()








;;
