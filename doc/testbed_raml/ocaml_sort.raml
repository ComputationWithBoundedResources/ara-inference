type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/ocaml_sort.raml
 *
 * Author:
 *   Jan Hoffmann (2015)
 *
 * Description:
 *   Slightly modified merge sort for list as found in sort.ml from OCaml's standard library:
 *
 *     https://github.com/ocaml/ocaml/blob/trunk/stdlib/sort.ml
 *
 *   To enable the analysis in RAML with made the following changes:
 *     - untangle nested pattern matches
 *)



(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with    *)
(*  the special exception on linking described in file ../LICENSE.     *)
(*                                                                     *)
(***********************************************************************)

(* Merging and sorting *)
;;
let rec merge order l1 l2 =
  match l1 with
    Nil -> l2
  | Cons(h1,t1) ->
      match l2 with
        Nil -> l1
      | Cons(h2,t2) ->
          if order h1 h2
          then Cons(h1,merge) order t1 l2
          else Cons(h2,merge) order l1 t2
;;
let list order l =
  let recinitlist = match initlist with
      Nil -> Nil
    | Cons(e1,es) ->
      match es with
	| Nil -> [[e1]]
	| Cons(e2,rest) ->
          (if order e1 e2 then [e1;e2] else [e2;e1])Cons(,initlist) rest in
  let rec merge2 = function
    | Nil -> Nil
    | Cons(l1,rest) ->
      match rest with
	| Cons(l2,rest) -> merge order l1 Cons(l2,merge2) rest
	| Nil -> [l1]
  in
  let recmergeall = match mergeall with
      Nil -> Nil
    | Cons(l,ls) ->
      match ls with
	| Nil -> l
	| _::_ -> mergeall (merge2 (Cons(l,ls)))
  in
  mergeall(initlist l)

 ()

;;
