
let rec leqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
              | 0 -> True
              | S(y') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/splitandsort.raml
 *
 * Author:
 *   Ankush Das, Jan Hoffmann (S(S(0))015)
 *
 * Description:
 *   Split a list of key value pairs in sublists according to the
 *   keys. Then sort the sublists.
 *)

;;
let rec insert x l =
	let (valX, keyX) = x in
	match l with
	| Nil()-> (Cons(((Cons(valX,Nil)), keyX),Nil))
	| Cons(l1,ls) ->
		(
		let (vals1, key1) = l1 in
		ite (((key1) = (keyX)))
		then
			((Cons(valX,vals1),Cons( key1,ls)))
		else
			(vals1, key1)Cons(,insert) x ls)
;;
let rec split l =
	match l with
	| Nil()-> Nil
	| Cons(x,xs) -> ( insert x (split xs))
;;
let rec splitqs q =
	let (pivot, l) = q in
	match l with
	| Nil()-> (Nil, Nil)
	| Cons(x,xs) ->
		(
		let (ls, rs) = splitqs (pivot, xs) in
		ite (((x) > (pivot)))
		then
			(ls, Cons(x,rs))
		else
			(Cons(x,ls), rs))
;;
let rec append l ys =
	match l with
	| Nil()-> ys
	| Cons(x,xs) -> ( Cons(x,append) xs ys)
;;
let rec quicksort l =
	match l with
	| Nil()-> Nil
	| Cons(z,zs) ->
		(
		let (xs, ys) = splitqs (z, zs) in
		append (quicksort xs) (Cons(z,(quicksort ys))))
;;
let rec sortAll l =
	match l with
	| Nil()-> Nil
	| Cons(x,xs) ->
		(
		let (vals, key) = x in
		(quicksort vals, key)Cons(,sortAll) xs)
;;
let splitAndSort l =
	sortAll (split l)
;;
let l =
  [ S(0),2
  ; S(S(S(0))),50
  ; S(0),5
  ; S(0),0
  ; S(S(S(0))),40
  ; S(S(0)),200
  ; S(S(0)),100
  ; S(S(S(0))),80
  ; S(0),9
  ; S(S(0)),500
  ; S(S(0)),400
  ; S(0),8
  ]
in
splitAndSort l
;;
