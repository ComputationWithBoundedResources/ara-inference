type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit

;;
let comp f g = fun(z) -> f (g z)
;;
let rev l =
  let recwalk = match walk with
  Nil -> (fun(ys) -> ys)
    | Cons(x,xs) -> comp (walk xs) (fun(ys) -> Cons(x,ys))
  in walk l Nil

;;
type 'a closure = Lam1 of 'a closure * 'a closure | Lam2 | Lam3 of 'a
;;
let rec apply c a = match c with
  Lam1(f,g) -> apply f (apply g a) | Lam2 -> a | Lam3(x) -> Cons(x,a)
;;
let comp f g = Lam1(f,g)
;;
let rev l =
  let recwalk = match walk with
    | Nil -> Lam2
    | Cons(x,xs) -> comp (walk xs) (Lam3 x)
in
  apply (walk l) Nil

rev [1;2;3]

;;
