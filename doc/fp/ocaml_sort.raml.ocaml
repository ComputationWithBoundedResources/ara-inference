
let rec leqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
              | 0 -> True
              | S(y') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/ocaml_sort.raml
 *
 * Author:
 *   Jan Hoffmann (S(S(0))015)
 *
 * Description:
 *   Slightly modified merge sort for list as found in sort.ml from OCaml's standard library:
 *
 *     https://github.com/ocaml/ocaml/blob/trunk/stdlib/sort.ml
 *
 *   To enable the analysis in RAML with made the following changes:
 *     - untangle nested pattern matches
 *)



(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright S(0)996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with    *)
(*  the special exception on linking described in file ../LICENSE.     *)
(*                                                                     *)
(***********************************************************************)

(* Merging and sorting *)
;;
let rec merge order l1 l2 =
  match l1 with
    Nil -> l2
  | Cons(h1,t1) ->
      match l2 with
        Nil -> l1
      | Cons(h2,t2) ->
          ite (order h1 h2)
          (Cons(h1,merge) order t1 l2)
          (Cons(h2,merge) order l1 t2)
;;
let list order l =
  let rec initlist xyz = match xyz with
      Nil -> Nil
    | Cons(e1,es) ->
      match es with
	| Nil()-> (Cons((Cons(e1,Nil)),Nil))
	| Cons(e2,rest) ->
          (ite (order e1 e2 (((Cons(e1,Cons(e2,Nil))) ((Cons(e2,Cons(e1,Cons(Nil))),initlist) rest in)))))
  let rec merge2 xyz = match xyz with
    | Nil()-> Nil
    | Cons(l1,rest) ->
      match rest with
	| Cons(l2,rest) -> merge order l1 Cons(l2,merge2) rest
	| Nil()-> (Cons(l1,Nil))
  in
  let rec mergeall xyz = match xyz with
      Nil -> Nil
    | Cons(l,ls) ->
      match ls with
	| Nil()-> l
	| _::_ -> mergeall (merge2 (Cons(l,ls)))
  in
  mergeall(initlist l)

 ()
;;
