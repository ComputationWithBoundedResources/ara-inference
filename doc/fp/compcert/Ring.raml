(*-- Datatypes.ml --*)
(** val implb : bool -> bool -> bool **)

let implb b1 b2 =
  if b1 then b2 else true

(** val xorb : bool -> bool -> bool **)

let xorb b1 b2 =
  if b1 then if b2 then false else true else b2

(** val negb : bool -> bool **)

let negb = function x ->
if (x = true) then false else true

type nat =
| O
| S of nat

type ('a, 'b) sum =
| Coq_inl of 'a
| Coq_inr of 'b

(** val fst : ('a1 * 'a2) -> 'a1 **)

let fst = function a ->
let (x, y) = a in x

(** val snd : ('a1 * 'a2) -> 'a2 **)

let snd = function a ->
let (x, y) = a in y

(** val length : 'a1 list -> nat **)

let rec length = function myvariable ->
match myvariable with
| [] -> O
| y :: l' -> S (length l')

(** val app : 'a1 list -> 'a1 list -> 'a1 list **)

let rec app l m =
  match l with
  | [] -> m
  | a :: l1 -> a :: (app l1 m)

type comparison =
| Eq
| Lt
| Gt

(** val coq_CompOpp : comparison -> comparison **)

let coq_CompOpp = function myvariable ->
match myvariable with
| Eq -> Eq
| Lt -> Gt
| Gt -> Lt

type coq_CompareSpecT =
| CompEqT
| CompLtT
| CompGtT

(** val coq_CompareSpec2Type : comparison -> coq_CompareSpecT **)

let coq_CompareSpec2Type = function myvariable ->
match myvariable with
| Eq -> CompEqT
| Lt -> CompLtT
| Gt -> CompGtT

type 'a coq_CompSpecT = coq_CompareSpecT

(** val coq_CompSpec2Type : 'a1 -> 'a1 -> comparison -> 'a1 coq_CompSpecT **)

let coq_CompSpec2Type x y c =
  coq_CompareSpec2Type c

(*$$ Datatypes.ml $$*)

(** val bool_eq : bool -> bool -> bool **)

let bool_eq b1 b2 =
  if b1 then b2 else negb b2

;; ()
