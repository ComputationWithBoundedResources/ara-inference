([1mÎ»n[0m.
  (([1mÎ»plus[0m.
     (([1mÎ»equal[0m.
        (([1mÎ»find[0m.
           (([1mÎ»return[0m.
              (([1mÎ»bind[0m.
                 (([1mÎ»bind'[0m.
                    (([1mÎ»get[0m.
                       (([1mÎ»modify[0m.
                          (([1mÎ»evalState[0m.
                             (([1mÎ»liftM[0m.
                                (([1mÎ»liftM2[0m.
                                   (([1mÎ»memoM[0m.
                                      (([1mÎ»fibM[0m.
                                         (([1mÎ»fib[0m.
                                            ([4m0[0m [4m14[0m)) ([1mÎ»n[0m.
                                            (([4m5[0m ([4m1[0m [4m0[0m)) Nil()))))
                                       ([1mfix_0[0m
                                         [([1mÎ»fibM[0m.
                                           ([1mÎ»n[0m.
                                             ([1mcase[0m [4m0[0m [1mof[0m
                                               {0 -> ([4m10[0m S(0())) | S -> ([1mÎ»n'[0m.
                                                  ([1mcase[0m [4m0[0m [1mof[0m
                                                    {0 -> ([4m11[0m S(0()))
                                                      | S -> ([1mÎ»n''[0m.
                                                       ((([4m5[0m [4m15[0m) (([4m4[0m [4m3[0m) [4m1[0m))
                                                        (([4m4[0m [4m3[0m) [4m0[0m)))}))})))])))
                                    ([1mÎ»m[0m.
                                      ([1mÎ»v[0m.
                                        ((([1mÎ»lookupM[0m.
                                            ([1mÎ»insertM[0m.
                                              ((([4m10[0m [4m1[0m) [4m11[0m) ([1mÎ»r[0m.
                                                 ([1mcase[0m [4m0[0m [1mof[0m
                                                   {None -> (([4m11[0m ([4m4[0m [4m3[0m)) ([1mÎ»a[0m.
                                                               (([4m11[0m ([4m2[0m [4m0[0m))
                                                                ([4m13[0m [4m0[0m))))
                                                     | Some -> ([1mÎ»a[0m.([4m13[0m [4m0[0m))})))))
                                          (([4m3[0m ([4m10[0m [4m0[0m)) [4m6[0m)) ([1mÎ»a[0m.
                                           ([4m6[0m ([1mÎ»c[0m.
                                              Cons(Pair([4m2[0m,[4m1[0m),[4m0[0m))))))))) ([1mÎ»f[0m.
                                   ([1mÎ»m1[0m.
                                     ([1mÎ»m2[0m.
                                       (([4m8[0m [4m1[0m) ([1mÎ»r1[0m.
                                          (([4m9[0m [4m1[0m) ([1mÎ»r2[0m.
                                             ([4m11[0m (([4m4[0m [4m1[0m) [4m0[0m))))))))))) ([1mÎ»f[0m.
                                ([1mÎ»m[0m.
                                  (([4m6[0m [4m0[0m) ([1mÎ»r[0m.
                                     ([4m8[0m ([4m2[0m [4m0[0m)))))))) ([1mÎ»m[0m.
                             ([1mÎ»s[0m.
                               ([1mcase[0m ([4m1[0m [4m0[0m) [1mof[0m
                                 {Pair -> ([1mÎ»s[0m.
                                   ([1mÎ»a[0m.
                                     [4m0[0m))}))))) ([1mÎ»f[0m.
                          ([1mÎ»s[0m.
                            Pair(([4m1[0m [4m0[0m),Unit()))))) ([1mÎ»s[0m.
                       Pair([4m0[0m,[4m0[0m)))) ([1mÎ»m1[0m.
                    ([1mÎ»m2[0m.
                      (([4m2[0m [4m1[0m) ([1mÎ»r[0m.
                         [4m1[0m)))))) ([1mÎ»m[0m.
                 ([1mÎ»f[0m.
                   ([1mÎ»s[0m.
                     ([1mcase[0m ([4m2[0m [4m0[0m) [1mof[0m
                       {Pair -> ([1mÎ»s'[0m.
                         ([1mÎ»a[0m.
                           (([4m3[0m [4m0[0m) [4m1[0m)))})))))) ([1mÎ»a[0m.
              ([1mÎ»s[0m.
                Pair([4m0[0m,[4m1[0m)))))
         ([1mfix_0[0m
           [([1mÎ»find[0m.
             ([1mÎ»key[0m.
               ([1mÎ»l[0m.
                 ([1mcase[0m [4m0[0m [1mof[0m
                   {Nil -> None() | Cons -> ([1mÎ»p[0m.
                      ([1mÎ»l'[0m.
                        ([1mcase[0m [4m1[0m [1mof[0m
                          {Pair -> ([1mÎ»k[0m.
                            ([1mÎ»v[0m.
                              ([1mcase[0m (([4m7[0m [4m1[0m) [4m5[0m) [1mof[0m
                                {True -> Some([4m0[0m) | False -> (([4m6[0m [4m5[0m)
                                                             [4m2[0m)})))})))}))))])))
      ([1mfix_0[0m
        [([1mÎ»equal[0m.
          ([1mÎ»x[0m.
            ([1mÎ»y[0m.
              ([1mcase[0m [4m1[0m [1mof[0m
                {0 -> ([1mcase[0m [4m0[0m [1mof[0m
                        {0 -> True() | S -> ([1mÎ»y'[0m.False())}) | S -> ([1mÎ»x'[0m.
                   ([1mcase[0m [4m1[0m [1mof[0m
                     {0 -> False() | S -> ([1mÎ»y'[0m.(([4m4[0m [4m1[0m) [4m0[0m))}))}))))])))
   ([1mfix_0[0m
     [([1mÎ»plus[0m.
       ([1mÎ»x[0m.
         ([1mÎ»y[0m.
           ([1mcase[0m [4m1[0m [1mof[0m
             {0 -> [4m0[0m | S -> ([1mÎ»x'[0m.S((([4m3[0m [4m0[0m) [4m1[0m)))}))))])))
Could not match expected type '(nat option -> 'a50)
                                -> 'a73' with actual type ''a50'.
In the term '((([4m10[0m [4m1[0m) [4m11[0m) ([1mÎ»r[0m.
                ([1mcase[0m [4m0[0m [1mof[0m
                  {None -> (([4m11[0m ([4m4[0m [4m3[0m)) ([1mÎ»a[0m.
                              (([4m11[0m ([4m2[0m [4m0[0m)) ([4m13[0m [4m0[0m)))) | Some -> ([1mÎ»a[0m.
                     ([4m13[0m [4m0[0m))})))' . 
In the definition 'let memoM v m = ...', namely
let lookupM = ((liftM (find v)) get)
and insertM a = (modify (fun c -> Cons(Pair(v,a),c)))
in (((bind lookupM) return) (fun r -> (match r with
   | None() ->   ((bind (m v)) (fun a -> ((bind' (insertM a)) (return a))))
   | Some(a) ->   (return a))))

Context: [. 'a42
         ,. 'a41
         ,. 'a40
         ,. 'a39
         ,. 'b -> 'a36 -> 'a36 -> 'a15
         ,. 'k
         ,. 'a15 -> 'y list -> 'a38
         ,. 'i
         ,. 'h
         ,. 'g
         ,. 'f
         ,. nat -> 'a15
         ,. 'd
         ,. 'c
         ,. 'b
         ,. nat]
