type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Bool = True | False
;;
type Unit = Unit
;;
let rec eq x y = match x with
  | 0 -> (match y with
         | 0 -> True
         | S(y) -> False)
  | S(x') -> match y with
             | 0 -> False
             | S(y') -> eq x' y'
;;

(** val string_dec : char(list) -> char(list) -> bool **)

let rec string_dec s s0 =
  match s with
  | Nil ->
    (match s0 with
     | Nil -> True
     | Cons(a,s1) -> False)
  | Cons(a,s1) ->
    (match s0 with
     | Nil -> False
     | Cons(a0,s2) -> match eq a a0 with
         | True -> string_dec s1 s2
         | False ->  False)
;;


