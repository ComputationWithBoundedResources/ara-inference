;;

type 'a option = None | Some of 'a
;;
;;

type ('a,'b) pair = Pair of 'a * 'b
;;
;;

type 'a list = Nil | Cons of 'a * 'a list
;;
;;

type nat = 0 | S of nat
;;
;;

type Unit = Unit
;;
;;

type __
;;
;;

type 'x arrows_left = __
;;
;;

type 'x arrows_right = __
;;
;;

type tuple = __
;;
;;

let rec magic x = magic x

(** val uncurry : __ list -> 'a1 arrows_left -> tuple -> 'a1 **)
;;
;;

let rec uncurry args f x =
  match args with
  | Nil -> magic f
  | _Cons(,q) -> let(d, t) = magic x in magic uncurry q f t d

 ()
;;
