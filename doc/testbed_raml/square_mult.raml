type 'a option = None | Some of 'a
;;
type ('a,'b) pair = Pair of 'a * 'b
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type nat = 0 | S of nat
;;
type Unit = Unit

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/square_mult.raml
 *
 * Author:
 *   Jan Hoffmann (2015)
 *
 * Description:
 *   Squared exponentiation.
 *
 *)

exception Invalid_argument
;;
type binary = Zero | One

;;
let square_mult m k =
(*computes m^k*)

  let x = ref m in

  let rec sq_mult k =
    match k with
      | Nil -> ()
      | Cons(b,bs) ->
        let unused =
	  let unused = Raml.tick 1.0 in
	  x := (!x)*(!x)
	in
	let unused =
	  match b with
	    | Zero -> ()
	    | One ->
	      let unused = Raml.tick(1.0) in
	      x := (!x)*m
	in
	sq_mult bs
  in
  match k with
    | Nil -> raise Invalid_argument
    | Cons(b,bs) ->
      match b with
	| Zero -> raise Invalid_argument
	| One ->
	  let unused = sq_mult bs in
	  !x



square_mult 3 [One;Zero;One;One;Zero;Zero]

;;
