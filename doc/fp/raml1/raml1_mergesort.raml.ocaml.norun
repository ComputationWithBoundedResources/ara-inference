
let rec leqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
              | 0 -> True
              | S(y') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/raml1_mergesort.raml
 *
 * Author:
 *   Ankush Das, Jan Hoffmann (S(S(0))015)
 *
 * Description:
 *   An implementation of the well known sorting algorithm mergesort.
 *   This implementation deallocates the input list.  Copy the list before
 *   ite (you want to use the unsorted list later.)
 *
 *   It is suprising that the function mergesort can be analysed.  The
 *   type of the function looks like the result of a bug on the first
 *   view.  But it is correct.  The function mergesort is a nice
 *   example of a type that might be hard to find without type
 *   inference.
 *
 *   There is also an out commented buggy version of mergesort
 *   (mergesortBuggy) that does not terminate and consumes an infinite
 *   ammount of heap-space and time.  Thus our analysis does not work
 *   for mergesortBuggy.  (Note that it is no general problem for our
 *   analysis ite (a function does not terminate.  For example f(x) =)
 *   f(x) consumes no heap-space and can be analysed with the
 *   heap-space metric.)
 *)

;;
let rec msplit l =
	match l with
	| Nil()-> (Nil, Nil)
	| Cons(x1,xs) ->
		match xs with
		| Nil()-> ((Cons(x1,Nil)), Nil)
		| Cons(x2,xs') ->
			(
			let (l1, l2) = msplit xs' in
			(Cons(x1,l1), Cons(x2,l2)))
;;
let rec merge l1 l2 =
	match l1 with
	| Nil()-> l2
	| Cons(x,xs) ->
		match l2 with
		| Nil()-> Cons(x,xs)
		| Cons(y,ys) ->
			(
			ite (((x) < (y)) (Cons(x,merge) xs (Cons(y,ys))))
			(Cons(y,merge) (Cons(x,xs)) ys))
;;
let rec mergesortBuggy l =
	match l with
	| Nil()-> Nil
	| Cons(x1,xs) ->
		let (l1, l2) = msplit l in
		( merge (mergesortBuggy l1) (mergesortBuggy l2))
;;
let rec mergesort l =
	match l with
	| Nil()-> Nil
	| Cons(x1,xs) ->
		match xs with
		| Nil()-> Cons(x1,xs)
		| Cons(x2,xs') ->
			let (l1, l2) = msplit ((Cons(x1,Cons(x2,xs')))) in
			( merge (mergesort l1) (mergesort l2))

mergesort [0;4;5;9;7;1;2;8;6;3]
;;
