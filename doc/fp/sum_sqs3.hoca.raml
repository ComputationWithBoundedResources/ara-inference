type nat = Zero | S of nat;;
type 'a maybe = Nothing | Just of 'a;;


let rec plus x y =
  match x with
  | Zero -> y
  | S(x') -> S(plus x' y)
;;

let rec mult x y =
  match x with
  | Zero -> Zero
  | S(x') -> plus y (mult x' y)
;;

let square x = mult x x
;;

let rec unfoldr f z =
  match f z with
  | Nothing -> []
  | Just(z') -> z'::unfoldr f z'
;;

let countdown m =
  match m with
  | Zero -> Nothing
  | S(m') -> Just(m')
;;

let enum n =
  match n with
  | Zero -> []
  | S(n') -> n:: unfoldr countdown n
;;

let rec map f xs =
  match xs with
  | [] -> []
  | x::xs' -> f x:: map f xs'
;;

let rec sum xs =
  match xs with
  | [] -> Zero
  | x::xs' -> plus x (sum xs')
;;

let sum_sqs n = sum (map square (enum n))
;;

let main n = sum_sqs n;;
