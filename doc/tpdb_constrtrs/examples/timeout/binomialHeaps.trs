(VAR x y r c r1 x1 c1 r2 x2 c2 t t' ts' ts1 ts2 ts1' ts2' xs t1 t2 ts)

(DATATYPES
  Bool = <true, false>
  Elem = <Elem(Nat)>
  Nat = µX.< 0, s(X) >
  TreeList = µX.< nil, cons(Tree, X) >
  Tree = µX.< Node(Nat, Elem, TreeList) >
  Heap = < Heap(TreeList) >
  Tuple = <Tuple(Tree, TreeList), empty >
)

(SIGNATURES
  val :: Elem -> Nat
  leq :: Nat x Nat -> Bool
  lt :: Nat x Nat -> Bool
  iteNode :: Bool x Tree x Tree -> Tree
  iteTuple :: Bool x Tuple x Tuple -> Tuple
  iteTreeList :: Bool x TreeList x TreeList -> TreeList
  rank :: Tree -> Nat
  root :: Tree -> Elem
  link :: Tree x Tree -> Tree
  insTree :: Tree x TreeList -> TreeList
  merge :: TreeList x TreeList -> TreeList
  removeMinTree :: TreeList -> Tuple
  removeMinTree' :: Tree x TreeList x Tuple -> Tuple
  fst :: Tuple -> Tree
  findMin :: TreeList -> Elem
  deleteMin :: TreeList -> TreeList
  deleteMin' :: Tuple -> TreeList
  reverse :: TreeList -> TreeList
  rev :: TreeList x TreeList -> TreeList
)


(RULES
  val(Elem(x)) -> x

  leq(0, x) -> false
  leq(x, 0) -> true
  leq(s(x), s(y)) -> leq(x,y)

  lt(0,0) -> false
  lt(0,x) -> true
  lt(x,0) -> false
  lt(s(x), s(y)) -> lt(x, y)

  iteNode(true, x,y) -> x
  iteNode(false,x,y) -> y

  iteTreeList(true, x,y) -> x
  iteTreeList(false,x,y) -> y

  iteTuple(true, x,y) -> x
  iteTuple(false,x,y) -> y


  rank(Node(r,x,c)) -> r
  rank(x) -> 0

  root(Node(r,x,c)) -> x

  link(Node(r1,x1,c1), Node(r2,x2,c2)) ->
    iteNode(leq(val(x1), val(x2)), Node(s(r1), x1, cons(Node(r2,x2,c2),c1))
                             , Node(s(r1), x2, cons(Node(r1,x1,c1),c2)))

  insTree(x,nil) -> cons(x,nil)
  insTree(t,cons(t',ts')) ->
    iteTreeList(lt(rank(t), rank(t')), cons(t, cons(t',ts'))
                             , insTree(link(t,t'), ts'))


  merge(ts1, nil) -> ts1
  merge(nil, ts2) -> ts2
  merge(cons(t1, ts1'), cons(t2, ts2')) ->
    iteTreeList(lt(rank(t1),rank(t2)), cons(t1, merge(ts1', cons(t2,ts2')))
               , iteTreeList(lt(rank(t2), rank(t1)), cons(t2, merge(cons(t1,ts1'), ts2'))
                                                   , insTree(link(t1,t2), merge(ts1', ts2'))))

  removeMinTree(nil) -> empty
  removeMinTree(cons(t,nil)) -> Tuple(t, nil)
  removeMinTree(cons(t,ts)) -> removeMinTree'(t, ts, removeMinTree(ts))

  removeMinTree'(t, ts, Tuple(t', ts')) ->
    iteTuple(leq(val(root(t)), val(root(t'))), Tuple(t,ts), Tuple(t', cons(t, ts')))


  fst(Tuple(x,y)) -> x
  findMin(ts) -> root(fst(removeMinTree(ts)))

  deleteMin(ts) -> deleteMin'(removeMinTree(ts))
  deleteMin'(Tuple(Node(y,x,ts1),ts2)) -> merge(reverse(ts1),ts2)

  reverse(x) ->  rev(x, nil)

  rev(nil,x) -> x
  rev(cons(x,xs),y) -> rev(xs, cons(x,y))

)
(COMMENT

)


