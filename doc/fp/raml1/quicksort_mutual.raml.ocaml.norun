
let rec leqNat x y =
  match y with
  | 0 -> True
  | S(y') -> (match x with
            | S(x') -> leqNat x' y'
            | 0 -> False)
;;
let rec eqNat x y =
  match y with
  | 0 -> (match x with
      | 0 -> True
      | S(x') -> False)
  | S(y') -> (match x with
            | S(x') -> eqNat x' y'
            | 0 -> False)
;;
let rec geqNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
              | 0 -> True
              | S(y') -> geqNat x' y')
;;
let rec ltNat x y =
  match y with
   | 0 -> False
   | S(y') -> (match x with
        | 0 -> True
        | S(x') -> ltNat x' y')
;;
let rec gtNat x y =
  match x with
   | 0 -> False
   | S(x') -> (match y with
             | 0 -> True
             | S(y') -> gtNat x' y')


;;
let ifz n th el = match n with
   | 0 -> th 0
   | S(x) -> el x
;;
let ite b th el = match b with
   | True()-> th
   | False()-> el
;;
let minus n m =
  let rec minus' m n = match m with
        | 0 -> 0
        | S(x) -> (match n with
          | 0 -> m
          | S(y) -> minus' x y)
  in Pair(minus' n m,m)
;;
let rec plus n m = match m with
  | 0 -> n
  | S(x) -> S(plus n x)
;;
type ('a,'b,'c) triple = Triple of 'a * 'b * 'c
;;
let rec div_mod n m = match (minus n m) with
  | Pair(res,m) -> (match res with
                   | 0 -> Triple (0,n,m)
                   | S(x) -> (match (div_mod res m) with
                             | Triple(a,rest,unusedM) -> Triple(plus S(0) a,rest,m)))
;;
let rec mult n m = match n with
   | 0 -> 0
   | S(x) -> S(plus (mult x m) m)
;;
type bool = True | False
;;
type 'a option = None | Some of 'a
;;
type 'a list = Nil | Cons of 'a * 'a list
;;
type Unit = Unit
;;
type ('a,'b) pair = Pair of 'a * 'b

(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/quicksort_mutual.raml
 *
 * Author:
 *   Ankush Das, Jan Hoffmann (S(S(0))015)
 *
 * Description:
 *   A mutually recursive implementation of the quick sort algorithm as
 *   given in the article 'Dependent types for program termination
 *   verification' by Hongwei Xi (Logic in Computer Science, S(S(0))001).
 *
 *   My experiments indicate that RAML computes a tight bound on the
 *   number of evaluation steps that are used by the function qs.
 *
 *   It is interesting that the inputs that produce the worst-case behavior
 *   are not reversely sorted lists (Cons(S(0),S(S(0)),S(S(S(0))),S(S(S(S(0)))),S(S(S(S(S(0))))),S(S(S(S(S(S(0)))))),Nil)) as usual.  The
 *   reason is that it makes a difference for functional implementations of
 *   quick sort whether the first or second recursive call receives a
 *   longer input list.  Because of the function append, the worst-case
 *   behavior emerges ite (the first argument of append is as long as)
 *   possible.  As a result, worst-case inputs have the form
 *   (Cons(S(0),S(S(S(0))),S(S(S(S(S(0))))),S(S(S(S(S(S(0)))))),S(S(S(S(0)))),S(S(0)),Nil)).
 *)


;;
let rec append l1 l2 =
	match l1 with
	| Nil()-> l2
	| Cons(x,xs) -> ( Cons(x,append) xs l2)
;;
let rec part y l r xs =
	match xs with
	| Nil()-> ( append (qs l) (Cons(y,(qs r))))
	| Cons(x,xs') ->
		(
		ite (((x) < (y)) (part y (Cons(x,l)) r xs'))
		(part y l (Cons(x,r)) xs'))
  and
    qs l =
	match l with
	| Nil()-> Nil
	| Cons(x,xs) -> ( part x Nil Nil xs)

qs [S(0);S(S(S(0)));S(S(S(S(S(0)))));-7;-9;S(0)0;-8;S(S(S(S(S(S(0))))));S(S(S(S(0))));S(S(0))]
;;
