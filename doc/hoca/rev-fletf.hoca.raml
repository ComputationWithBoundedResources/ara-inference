let rec foldr f z xs =
  match xs with
  | [] -> z
  | x::xs' -> f x (foldr f z xs')
;;

let fleft op e xs =
  let step x f a = f (op a x)
  in foldr step (fun u -> u) xs e
;;

let rev = fleft (fun xs x -> x::xs) []
;;

let main l = rev l;;
